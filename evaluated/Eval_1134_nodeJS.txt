
Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ const express = require('express');
      const app = express();

      const MongoClient = require('mongodb').MongoClient;

      //Variables d'environnement
      const PORT = process.env.PORT || 3000;
      const URL = process.env.MONGODB_URL;
      const MongoCollection = process.env.MONGODB_MongoCollection;
      const MongoDB = process.env.MONGODB_DATABASE;

      let PB = false; 

      require("dotenv").config();



      app.use(express.json());
      app.listen(PORT, () => console.log(`Server is listening on port ${PORT}...`))

      ( async() => {
          //Connexion a mongodb
          const client = new MongoClient(URL);
          try {
              await client.connect();
          } catch (err) {
              console.error(err);
              PB = true;
          }

          app.post('/', async function (req, res) {
              const db = client.db(MongoDB);
              if (PB) {
                  res.send('J\'ai perdu la m√©moire...')
              }
              if (req.body.nom !== undefined) {
                  await db.MongoCollection(MongoCollection).insertOne({ nom: req.body.nom });
                  res.send('Bienvenue, '+req.body.nom+'.') 
              } else {
                  res.send('Il manque votre nom.')
              }
          })

          app.get('/', async function (req, res) {
              if (PB) {
                  res.send('J\'ai perdu la m√©moire...')
              }
              const db = client.db(MongoDB);
              const col = db.MongoCollection(MongoCollection);
              let last = await col.find().sort({ _id: -1 }).limit(1).toArray();

              if (last[0].nom) {
                  res.send("La derni√®re personne que j'ai rencontr√©e est: '+last[0].nom+'.")
              } else {
                  res.send("Je n'ai rencontr√© personne pour l'instant")
              }
          })
      })();
  ‚úî server.js utilise seulement await pour r√©cup√©rer les valeurs promises
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úñ package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install 
  ‚úñ package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start `t.regex()` must be called with a string
  ‚úî README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur
/usr/src/app/server.js:21
( async() => {
^
TypeError: app.listen(...) is not a function
/usr/src/app/server.js:21
( async() => {
^

TypeError: app.listen(...) is not a function
    at Object.<anonymous> (/usr/src/app/server.js:21:1)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)

[SERVER STARTER] ‚ùå Error: runInDockerBg process exited with 1
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (2) POST / {} -> /Il manque votre nom/ 
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ 
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ 
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur Rejected promise returned by test
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus Rejected promise returned by test

  11 tests failed

  package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:101

   100:     t.true(deps.includes('express'));
   101:     t.true(deps.includes('mongodb'));
   102:   }                                  

  Value is not `true`:

  false



  package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:109

   108:     const { scripts } = JSON.parse(await runInDocker('cat package.json'‚Ä¶
   109:     t.regex(scripts.start, /node server.js/);                           
   110:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:186

   185:     const docs = JSON.parse(                                            
   186:       await mongoInDocker.runClientFct(mongo.connectionString, clientFc‚Ä¶
   187:     );                                                                  

  Rejected promise returned by test. Reason:

  TypeError {
    message: 'Cannot read property \'connectionString\' of undefined',
  }



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:198

   197:     const { mongo } = await t.context.serverStarted();                  
   198:     killSync(mongo.pid); // kill mongodb server                         
   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/‚Ä¶

  Rejected promise returned by test. Reason:

  TypeError {
    message: 'Cannot read property \'pid\' of undefined',
  }


üßπ Stop and remove Docker containers...
