
Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ const express = require('express');
      const app = express();
      const bodyParser = require('body-parser');
      const MongoClient = require('mongodb').MongoClient;
      const assert = require('assert');

      // Connection URL
      const url = 'mongodb+srv://Partiel1404:bobrasovki@chatbot-ifzz3.azure.mongodb.net/test';

      // Database Name
      const dbName = 'partiel';

      // Use connect method to connect to the server
      MongoClient.connect(url, function(err, client) {
        assert.equal(null, err);
        console.log("Connected successfully to server");

        const db = client.db(dbName);

        client.close();
      });
      //mon code
      app.use(bodyParser.json());
      app.use(express.urlencoded({ extended: true }))

      app.get('/', function (request, response) {
          response.send('Hello World');

      });

      app.get('/nom', function (request, response) {
          if (request.query.nom === undefined) {
              response.send('Quel est votre nom ?')
          } else {
              response.send('Bienvenue, ' + request.query.nom + '.')
          }
      });

      app.listen(3000, function () {
          console.log("Server running at http://localhost:3000");
      });

      //Il me reste peu de temps pour finir, il faut que je fasse en sorte avec une variable env d'envoyer le nom dans une bdd mongodb pour ensuite
      //la recuperer quand la variable "nom" est identique √† celle sur mongodb
  ‚úñ server.js utilise seulement await pour r√©cup√©rer les valeurs promises 
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úî package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install
  ‚úî package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start
  ‚úñ README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur 
/usr/src/app/node_modules/mongodb/lib/utils.js:725
          throw error;
Server running at http://localhost:3000

(node) DeprecationWarning: current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to the MongoClient constructor.

/usr/src/app/node_modules/mongodb/lib/utils.js:725
          throw error;
          ^

AssertionError [ERR_ASSERTION]: null == { MongoNetworkError: failed to connect to server [chatbot-shard-00-00-ifzz3.azure.mongodb.net:27017] on first connect [MongoN...
    at /usr/src/app/server.js:15:10
    at /usr/src/app/node_modules/mongodb/lib/utils.js:722:9
    at err (/usr/src/app/node_modules/mongodb/lib/mongo_client.js:223:23)
    at connectCallback (/usr/src/app/node_modules/mongodb/lib/operations/connect.js:361:5)
    at topology.connect.err (/usr/src/app/node_modules/mongodb/lib/operations/connect.js:594:14)
    at ReplSet.<anonymous> (/usr/src/app/node_modules/mongodb/lib/topologies/replset.js:357:11)
    at Object.onceWrapper (events.js:286:20)
    at ReplSet.emit (events.js:198:13)
    at /usr/src/app/node_modules/mongodb/lib/core/topologies/replset.js:619:23
    at done (/usr/src/app/node_modules/mongodb/lib/core/topologies/replset.js:290:7)

  ‚úñ le serveur r√©pond sur le port 3000 Rejected promise returned by test
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (2) POST / {} -> /Il manque votre nom/ 
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ 
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ 
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus 

  12 tests failed

  server.js utilise seulement await pour r√©cup√©rer les valeurs promises

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:69

   68:     const { serverSource } = t.context;  
   69:     t.regex(serverSource, /await/);      
   70:     t.notRegex(serverSource, /\.then\(/);

  Value must match expression:

  `const express = require('express');‚êä
  const app = express();‚êä
  const bodyParser = require('body-parser');‚êä
  const MongoClient = require('mongodb').MongoClient;‚êä
  const assert = require('assert');‚êä
  ‚êä
  // Connection URL‚êä
  const url = 'mongodb+srv://Partiel1404:bobrasovki@chatbot-ifzz3.azure.mongodb.net/test';‚êä
  ‚êä
  // Database Name‚êä
  const dbName = 'partiel';‚êä
  ‚êä
  // Use connect method to connect to the server‚êä
  MongoClient.connect(url, function(err, client) {‚êä
    assert.equal(null, err);‚êä
    console.log("Connected successfully to server");‚êä
  ‚êä
    const db = client.db(dbName);‚êä
  ‚êä
    client.close();‚êä
  });‚êä
  //mon code‚êä
  app.use(bodyParser.json());‚êä
  app.use(express.urlencoded({ extended: true }))‚êä
  ‚êä
  app.get('/', function (request, response) {‚êä
      response.send('Hello World');‚êä
  ‚êä
  });‚êä
  ‚êä
  app.get('/nom', function (request, response) {‚êä
      if (request.query.nom === undefined) {‚êä
          response.send('Quel est votre nom ?')‚êä
      } else {‚êä
          response.send('Bienvenue, ' + request.query.nom + '.')‚êä
      }‚êä
  });‚êä
  ‚êä
  app.listen(3000, function () {‚êä
      console.log("Server running at http://localhost:3000");‚êä
  });‚êä
  ‚êä
  //Il me reste peu de temps pour finir, il faut que je fasse en sorte avec une variable env d'envoyer le nom dans une bdd mongodb pour ensuite‚êä
  //la recuperer quand la variable "nom" est identique √† celle sur mongodb`

  Regular expression:

  /await/



  README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:109

   108:     t.regex(readme, /node server|npm start/);
   109:     t.regex(readme, /npm test|curl/);        
   110:   }                                          

  Value must match expression:

  `Partiel‚êç‚êä
  ‚êç‚êä
  Pour tester mon code il faut faire une npm install puis un npm start‚êç‚êä
  Ce connecter sur le port 3000‚êç‚êä
  taper "nom?nom=nomquevousvoulez" dans l'URL et il vous repondra bienvenue`

  Regular expression:

  /npm test|curl/



  le serveur r√©pond sur le port 3000

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/runInDocker.js:67

   66:       logs.forEach(str => console.error(str));                       
   67:       reject(new Error('runInDockerBg process exited with ' + data));
   68:     });                                                              

  Rejected promise returned by test. Reason:

  Error {
    message: 'runInDockerBg process exited with 1',
  }



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:183

   182:     );                                                       
   183:     t.is(docs.length, 1);                                    
   184:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:194

   193:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/‚Ä¶
   194:     t.regex(data, /J'ai perdu la meÃÅmoire/);                            
   195:   }                                                                     

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /J'ai perdu la meÃÅmoire/


üßπ Stop and remove Docker containers...
