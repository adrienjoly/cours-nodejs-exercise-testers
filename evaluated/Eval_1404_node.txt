
Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ const express = require('express');
      const app = express();
      const bodyParser = require('body-parser');
      const MongoClient = require('mongodb').MongoClient;
      const assert = require('assert');

      // Connection URL
      const url = 'mongodb+srv://Partiel1404:bobrasovki@chatbot-ifzz3.azure.mongodb.net/test';

      // Database Name
      const dbName = 'partiel';

      // Use connect method to connect to the server
      MongoClient.connect(url, function(err, client) {
        assert.equal(null, err);
        console.log("Connected successfully to server");

        const db = client.db(dbName);

        client.close();
      });
      //mon code
      app.use(bodyParser.json());
      app.use(express.urlencoded({ extended: true }))

      app.get('/', function (request, response) {
          response.send('Hello World');

      });

      app.get('/nom', function (request, response) {
          if (request.query.nom === undefined) {
              response.send('Quel est votre nom ?')
          } else {
              response.send('Bienvenue, ' + request.query.nom + '.')
          }
      });

      app.listen(3000, function () {
          console.log("Server running at http://localhost:3000");
      });

      //Il me reste peu de temps pour finir, il faut que je fasse en sorte avec une variable env d'envoyer le nom dans une bdd mongodb pour ensuite
      //la recuperer quand la variable "nom" est identique √† celle sur mongodb
  ‚úñ server.js utilise seulement await pour r√©cup√©rer les valeurs promises 
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úî package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install
  ‚úî package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start
  ‚úñ README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur 
  ‚úî le serveur r√©pond sur le port 3000
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (2) POST / {} -> /Il manque votre nom/ Rejected promise returned by test
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ Rejected promise returned by test
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ 
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ Rejected promise returned by test
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ 
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus 

  11 tests failed

  server.js utilise seulement await pour r√©cup√©rer les valeurs promises

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:64

   63:     const { serverSource } = t.context;  
   64:     t.regex(serverSource, /await/);      
   65:     t.notRegex(serverSource, /\.then\(/);

  Value must match expression:

  `const express = require('express');‚êä
  const app = express();‚êä
  const bodyParser = require('body-parser');‚êä
  const MongoClient = require('mongodb').MongoClient;‚êä
  const assert = require('assert');‚êä
  ‚êä
  // Connection URL‚êä
  const url = 'mongodb+srv://Partiel1404:bobrasovki@chatbot-ifzz3.azure.mongodb.net/test';‚êä
  ‚êä
  // Database Name‚êä
  const dbName = 'partiel';‚êä
  ‚êä
  // Use connect method to connect to the server‚êä
  MongoClient.connect(url, function(err, client) {‚êä
    assert.equal(null, err);‚êä
    console.log("Connected successfully to server");‚êä
  ‚êä
    const db = client.db(dbName);‚êä
  ‚êä
    client.close();‚êä
  });‚êä
  //mon code‚êä
  app.use(bodyParser.json());‚êä
  app.use(express.urlencoded({ extended: true }))‚êä
  ‚êä
  app.get('/', function (request, response) {‚êä
      response.send('Hello World');‚êä
  ‚êä
  });‚êä
  ‚êä
  app.get('/nom', function (request, response) {‚êä
      if (request.query.nom === undefined) {‚êä
          response.send('Quel est votre nom ?')‚êä
      } else {‚êä
          response.send('Bienvenue, ' + request.query.nom + '.')‚êä
      }‚êä
  });‚êä
  ‚êä
  app.listen(3000, function () {‚êä
      console.log("Server running at http://localhost:3000");‚êä
  });‚êä
  ‚êä
  //Il me reste peu de temps pour finir, il faut que je fasse en sorte avec une variable env d'envoyer le nom dans une bdd mongodb pour ensuite‚êä
  //la recuperer quand la variable "nom" est identique √† celle sur mongodb`

  Regular expression:

  /await/



  README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:102

   101:     t.regex(readme, /node server|npm start/);
   102:     t.regex(readme, /npm test|curl/);        
   103:   }                                          

  Value must match expression:

  `Partiel‚êç‚êä
  ‚êç‚êä
  Pour tester mon code il faut faire une npm install puis un npm start‚êç‚êä
  Ce connecter sur le port 3000‚êç‚êä
  taper "nom?nom=nomquevousvoulez" dans l'URL et il vous repondra bienvenue`

  Regular expression:

  /npm test|curl/



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Hello World'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'post',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: ClientRequest {
      _contentLength: 0,
      _ended: true,
      _events: {
        abort: Function {},
        aborted: Function {},
        error: Function {},
        prefinish: Function requestOnPrefinish {},
        socket: Function {},
        timeout: Function {},
      },
      _eventsCount: 6,
      _hasBody: true,
      _header: `POST / HTTP/1.1‚êç‚êä
      Accept: application/json, text/plain, */*‚êç‚êä
      Content-Type: application/x-www-form-urlencoded‚êç‚êä
      User-Agent: axios/0.19.0‚êç‚êä
      Host: localhost:3000‚êç‚êä
      Connection: close‚êç‚êä
      Content-Length: 0‚êç‚êä
      ‚êç‚êä
      `,
      _headerSent: true,
      _last: true,
      _maxListeners: undefined,
      _onPendingData: Function noopPendingOutput {},
      _redirectable: Writable {
        _currentRequest: [Circular],
        _currentUrl: 'http://localhost:3000/',
        _events: Object { ‚Ä¶ },
        _eventsCount: 2,
        _maxListeners: undefined,
        _onNativeResponse: Function {},
        _options: Object { ‚Ä¶ },
        _redirectCount: 0,
        _redirects: [],
        _requestBodyBuffers: [],
        _requestBodyLength: 0,
        _writableState: WritableState [ ‚Ä¶ ],
        writable: true,
      },
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _trailer: '',
      aborted: undefined,
      agent: Agent {
        _events: Object { ‚Ä¶ },
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        freeSockets: {},
        keepAlive: false,
        keepAliveMsecs: 1000,
        maxFreeSockets: 256,
        maxSockets: Infinity,
        options: Object { ‚Ä¶ },
        protocol: 'http:',
        requests: {},
        sockets: Object { ‚Ä¶ },
      },
      chunkedEncoding: false,
      connection: Socket {
        _events: Object { ‚Ä¶ },
        _eventsCount: 7,
        _hadError: false,
        _handle: TCP { ‚Ä¶ },
        _host: 'localhost',
        _httpMessage: [Circular],
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState [ ‚Ä¶ ],
        _server: null,
        _sockname: null,
        _writableState: WritableState [ ‚Ä¶ ],
        allowHalfOpen: false,
        connecting: false,
        parser: null,
        readable: true,
        server: null,
        writable: false,
        [Symbol(asyncId)]: 213,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
      },
      finished: true,
      maxHeadersCount: null,
      method: 'POST',
      output: [],
      outputCallbacks: [],
      outputEncodings: [],
      outputSize: 0,
      parser: null,
      path: '/',
      res: IncomingMessage {
        _consuming: false,
        _dumped: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 3,
        _maxListeners: undefined,
        _readableState: ReadableState [ ‚Ä¶ ],
        aborted: false,
        client: Socket { ‚Ä¶ },
        complete: true,
        connection: Socket { ‚Ä¶ },
        headers: Object { ‚Ä¶ },
        httpVersion: '1.1',
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        method: null,
        rawHeaders: Array [ ‚Ä¶ ],
        rawTrailers: [],
        readable: false,
        redirects: [],
        req: [Circular],
        responseUrl: 'http://localhost:3000/',
        socket: Socket { ‚Ä¶ },
        statusCode: 404,
        statusMessage: 'Not Found',
        trailers: {},
        upgrade: false,
        url: '',
      },
      sendDate: false,
      shouldKeepAlive: false,
      socket: Socket {
        _events: Object { ‚Ä¶ },
        _eventsCount: 7,
        _hadError: false,
        _handle: TCP { ‚Ä¶ },
        _host: 'localhost',
        _httpMessage: [Circular],
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState [ ‚Ä¶ ],
        _server: null,
        _sockname: null,
        _writableState: WritableState [ ‚Ä¶ ],
        allowHalfOpen: false,
        connecting: false,
        parser: null,
        readable: true,
        server: null,
        writable: false,
        [Symbol(asyncId)]: 213,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
      },
      socketPath: undefined,
      timeout: undefined,
      timeoutCb: null,
      upgradeOrConnect: false,
      useChunkedEncodingByDefault: true,
      writable: true,
      [Symbol(isCorked)]: false,
      [Symbol(outHeadersKey)]: {
        accept: Array [ ‚Ä¶ ],
        'content-type': Array [ ‚Ä¶ ],
        host: Array [ ‚Ä¶ ],
        'user-agent': Array [ ‚Ä¶ ],
      },
    },
    response: {
      config: {
        adapter: Function httpAdapter {},
        data: undefined,
        headers: Object { ‚Ä¶ },
        maxContentLength: -1,
        method: 'post',
        timeout: 1500,
        transformRequest: Array [ ‚Ä¶ ],
        transformResponse: Array [ ‚Ä¶ ],
        url: 'http://localhost:3000/',
        validateStatus: Function validateStatus {},
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
      },
      data: `<!DOCTYPE html>‚êä
      <html lang="en">‚êä
      <head>‚êä
      <meta charset="utf-8">‚êä
      <title>Error</title>‚êä
      </head>‚êä
      <body>‚êä
      <pre>Cannot POST /</pre>‚êä
      </body>‚êä
      </html>‚êä
      `,
      headers: {
        connection: 'close',
        'content-length': '140',
        'content-security-policy': 'default-src \'none\'',
        'content-type': 'text/html; charset=utf-8',
        date: 'Fri, 17 Jul 2020 17:18:42 GMT',
        'x-content-type-options': 'nosniff',
        'x-powered-by': 'Express',
      },
      request: ClientRequest {
        _contentLength: 0,
        _ended: true,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `POST / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        Content-Type: application/x-www-form-urlencoded‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        Content-Length: 0‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: Writable { ‚Ä¶ },
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'POST',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: IncomingMessage { ‚Ä¶ },
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: true,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      status: 404,
      statusText: 'Not Found',
    },
    toJSON: Function {},
    message: 'Request failed with status code 404',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  settle (node_modules/axios/lib/core/settle.js:17:12)
  IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:237:11)



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Hello World'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    config: {
      adapter: Function httpAdapter {},
      data: 'nom=adrien',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Length': 10,
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'post',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: ClientRequest {
      _contentLength: null,
      _ended: true,
      _events: {
        abort: Function {},
        aborted: Function {},
        error: Function {},
        prefinish: Function requestOnPrefinish {},
        socket: Function {},
        timeout: Function {},
      },
      _eventsCount: 6,
      _hasBody: true,
      _header: `POST / HTTP/1.1‚êç‚êä
      Accept: application/json, text/plain, */*‚êç‚êä
      Content-Type: application/x-www-form-urlencoded‚êç‚êä
      User-Agent: axios/0.19.0‚êç‚êä
      Content-Length: 10‚êç‚êä
      Host: localhost:3000‚êç‚êä
      Connection: close‚êç‚êä
      ‚êç‚êä
      `,
      _headerSent: true,
      _last: true,
      _maxListeners: undefined,
      _onPendingData: Function noopPendingOutput {},
      _redirectable: Writable {
        _currentRequest: [Circular],
        _currentUrl: 'http://localhost:3000/',
        _events: Object { ‚Ä¶ },
        _eventsCount: 2,
        _maxListeners: undefined,
        _onNativeResponse: Function {},
        _options: Object { ‚Ä¶ },
        _redirectCount: 0,
        _redirects: [],
        _requestBodyBuffers: [],
        _requestBodyLength: 10,
        _writableState: WritableState [ ‚Ä¶ ],
        writable: true,
      },
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _trailer: '',
      aborted: undefined,
      agent: Agent {
        _events: Object { ‚Ä¶ },
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        freeSockets: {},
        keepAlive: false,
        keepAliveMsecs: 1000,
        maxFreeSockets: 256,
        maxSockets: Infinity,
        options: Object { ‚Ä¶ },
        protocol: 'http:',
        requests: {},
        sockets: Object { ‚Ä¶ },
      },
      chunkedEncoding: false,
      connection: Socket {
        _events: Object { ‚Ä¶ },
        _eventsCount: 7,
        _hadError: false,
        _handle: TCP { ‚Ä¶ },
        _host: 'localhost',
        _httpMessage: [Circular],
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState [ ‚Ä¶ ],
        _server: null,
        _sockname: null,
        _writableState: WritableState [ ‚Ä¶ ],
        allowHalfOpen: false,
        connecting: false,
        parser: null,
        readable: true,
        server: null,
        writable: false,
        [Symbol(asyncId)]: 254,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
      },
      finished: true,
      maxHeadersCount: null,
      method: 'POST',
      output: [],
      outputCallbacks: [],
      outputEncodings: [],
      outputSize: 0,
      parser: null,
      path: '/',
      res: IncomingMessage {
        _consuming: false,
        _dumped: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 3,
        _maxListeners: undefined,
        _readableState: ReadableState [ ‚Ä¶ ],
        aborted: false,
        client: Socket { ‚Ä¶ },
        complete: true,
        connection: Socket { ‚Ä¶ },
        headers: Object { ‚Ä¶ },
        httpVersion: '1.1',
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        method: null,
        rawHeaders: Array [ ‚Ä¶ ],
        rawTrailers: [],
        readable: false,
        redirects: [],
        req: [Circular],
        responseUrl: 'http://localhost:3000/',
        socket: Socket { ‚Ä¶ },
        statusCode: 404,
        statusMessage: 'Not Found',
        trailers: {},
        upgrade: false,
        url: '',
      },
      sendDate: false,
      shouldKeepAlive: false,
      socket: Socket {
        _events: Object { ‚Ä¶ },
        _eventsCount: 7,
        _hadError: false,
        _handle: TCP { ‚Ä¶ },
        _host: 'localhost',
        _httpMessage: [Circular],
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState [ ‚Ä¶ ],
        _server: null,
        _sockname: null,
        _writableState: WritableState [ ‚Ä¶ ],
        allowHalfOpen: false,
        connecting: false,
        parser: null,
        readable: true,
        server: null,
        writable: false,
        [Symbol(asyncId)]: 254,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
      },
      socketPath: undefined,
      timeout: undefined,
      timeoutCb: null,
      upgradeOrConnect: false,
      useChunkedEncodingByDefault: true,
      writable: true,
      [Symbol(isCorked)]: false,
      [Symbol(outHeadersKey)]: {
        accept: Array [ ‚Ä¶ ],
        'content-length': Array [ ‚Ä¶ ],
        'content-type': Array [ ‚Ä¶ ],
        host: Array [ ‚Ä¶ ],
        'user-agent': Array [ ‚Ä¶ ],
      },
    },
    response: {
      config: {
        adapter: Function httpAdapter {},
        data: 'nom=adrien',
        headers: Object { ‚Ä¶ },
        maxContentLength: -1,
        method: 'post',
        timeout: 1500,
        transformRequest: Array [ ‚Ä¶ ],
        transformResponse: Array [ ‚Ä¶ ],
        url: 'http://localhost:3000/',
        validateStatus: Function validateStatus {},
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
      },
      data: `<!DOCTYPE html>‚êä
      <html lang="en">‚êä
      <head>‚êä
      <meta charset="utf-8">‚êä
      <title>Error</title>‚êä
      </head>‚êä
      <body>‚êä
      <pre>Cannot POST /</pre>‚êä
      </body>‚êä
      </html>‚êä
      `,
      headers: {
        connection: 'close',
        'content-length': '140',
        'content-security-policy': 'default-src \'none\'',
        'content-type': 'text/html; charset=utf-8',
        date: 'Fri, 17 Jul 2020 17:18:42 GMT',
        'x-content-type-options': 'nosniff',
        'x-powered-by': 'Express',
      },
      request: ClientRequest {
        _contentLength: null,
        _ended: true,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `POST / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        Content-Type: application/x-www-form-urlencoded‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Content-Length: 10‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: Writable { ‚Ä¶ },
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'POST',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: IncomingMessage { ‚Ä¶ },
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: true,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      status: 404,
      statusText: 'Not Found',
    },
    toJSON: Function {},
    message: 'Request failed with status code 404',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  settle (node_modules/axios/lib/core/settle.js:17:12)
  IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:237:11)



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Hello World'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    config: {
      adapter: Function httpAdapter {},
      data: 'nom=michelle',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Length': 12,
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'post',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: ClientRequest {
      _contentLength: null,
      _ended: true,
      _events: {
        abort: Function {},
        aborted: Function {},
        error: Function {},
        prefinish: Function requestOnPrefinish {},
        socket: Function {},
        timeout: Function {},
      },
      _eventsCount: 6,
      _hasBody: true,
      _header: `POST / HTTP/1.1‚êç‚êä
      Accept: application/json, text/plain, */*‚êç‚êä
      Content-Type: application/x-www-form-urlencoded‚êç‚êä
      User-Agent: axios/0.19.0‚êç‚êä
      Content-Length: 12‚êç‚êä
      Host: localhost:3000‚êç‚êä
      Connection: close‚êç‚êä
      ‚êç‚êä
      `,
      _headerSent: true,
      _last: true,
      _maxListeners: undefined,
      _onPendingData: Function noopPendingOutput {},
      _redirectable: Writable {
        _currentRequest: [Circular],
        _currentUrl: 'http://localhost:3000/',
        _events: Object { ‚Ä¶ },
        _eventsCount: 2,
        _maxListeners: undefined,
        _onNativeResponse: Function {},
        _options: Object { ‚Ä¶ },
        _redirectCount: 0,
        _redirects: [],
        _requestBodyBuffers: [],
        _requestBodyLength: 12,
        _writableState: WritableState [ ‚Ä¶ ],
        writable: true,
      },
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _trailer: '',
      aborted: undefined,
      agent: Agent {
        _events: Object { ‚Ä¶ },
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        freeSockets: {},
        keepAlive: false,
        keepAliveMsecs: 1000,
        maxFreeSockets: 256,
        maxSockets: Infinity,
        options: Object { ‚Ä¶ },
        protocol: 'http:',
        requests: {},
        sockets: Object { ‚Ä¶ },
      },
      chunkedEncoding: false,
      connection: Socket {
        _events: Object { ‚Ä¶ },
        _eventsCount: 7,
        _hadError: false,
        _handle: TCP { ‚Ä¶ },
        _host: 'localhost',
        _httpMessage: [Circular],
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState [ ‚Ä¶ ],
        _server: null,
        _sockname: null,
        _writableState: WritableState [ ‚Ä¶ ],
        allowHalfOpen: false,
        connecting: false,
        parser: null,
        readable: true,
        server: null,
        writable: false,
        [Symbol(asyncId)]: 296,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
      },
      finished: true,
      maxHeadersCount: null,
      method: 'POST',
      output: [],
      outputCallbacks: [],
      outputEncodings: [],
      outputSize: 0,
      parser: null,
      path: '/',
      res: IncomingMessage {
        _consuming: false,
        _dumped: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 3,
        _maxListeners: undefined,
        _readableState: ReadableState [ ‚Ä¶ ],
        aborted: false,
        client: Socket { ‚Ä¶ },
        complete: true,
        connection: Socket { ‚Ä¶ },
        headers: Object { ‚Ä¶ },
        httpVersion: '1.1',
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        method: null,
        rawHeaders: Array [ ‚Ä¶ ],
        rawTrailers: [],
        readable: false,
        redirects: [],
        req: [Circular],
        responseUrl: 'http://localhost:3000/',
        socket: Socket { ‚Ä¶ },
        statusCode: 404,
        statusMessage: 'Not Found',
        trailers: {},
        upgrade: false,
        url: '',
      },
      sendDate: false,
      shouldKeepAlive: false,
      socket: Socket {
        _events: Object { ‚Ä¶ },
        _eventsCount: 7,
        _hadError: false,
        _handle: TCP { ‚Ä¶ },
        _host: 'localhost',
        _httpMessage: [Circular],
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState [ ‚Ä¶ ],
        _server: null,
        _sockname: null,
        _writableState: WritableState [ ‚Ä¶ ],
        allowHalfOpen: false,
        connecting: false,
        parser: null,
        readable: true,
        server: null,
        writable: false,
        [Symbol(asyncId)]: 296,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
      },
      socketPath: undefined,
      timeout: undefined,
      timeoutCb: null,
      upgradeOrConnect: false,
      useChunkedEncodingByDefault: true,
      writable: true,
      [Symbol(isCorked)]: false,
      [Symbol(outHeadersKey)]: {
        accept: Array [ ‚Ä¶ ],
        'content-length': Array [ ‚Ä¶ ],
        'content-type': Array [ ‚Ä¶ ],
        host: Array [ ‚Ä¶ ],
        'user-agent': Array [ ‚Ä¶ ],
      },
    },
    response: {
      config: {
        adapter: Function httpAdapter {},
        data: 'nom=michelle',
        headers: Object { ‚Ä¶ },
        maxContentLength: -1,
        method: 'post',
        timeout: 1500,
        transformRequest: Array [ ‚Ä¶ ],
        transformResponse: Array [ ‚Ä¶ ],
        url: 'http://localhost:3000/',
        validateStatus: Function validateStatus {},
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
      },
      data: `<!DOCTYPE html>‚êä
      <html lang="en">‚êä
      <head>‚êä
      <meta charset="utf-8">‚êä
      <title>Error</title>‚êä
      </head>‚êä
      <body>‚êä
      <pre>Cannot POST /</pre>‚êä
      </body>‚êä
      </html>‚êä
      `,
      headers: {
        connection: 'close',
        'content-length': '140',
        'content-security-policy': 'default-src \'none\'',
        'content-type': 'text/html; charset=utf-8',
        date: 'Fri, 17 Jul 2020 17:18:42 GMT',
        'x-content-type-options': 'nosniff',
        'x-powered-by': 'Express',
      },
      request: ClientRequest {
        _contentLength: null,
        _ended: true,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `POST / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        Content-Type: application/x-www-form-urlencoded‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Content-Length: 12‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: Writable { ‚Ä¶ },
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'POST',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: IncomingMessage { ‚Ä¶ },
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: true,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      status: 404,
      statusText: 'Not Found',
    },
    toJSON: Function {},
    message: 'Request failed with status code 404',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  settle (node_modules/axios/lib/core/settle.js:17:12)
  IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:237:11)



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Hello World'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:176

   175:     );                                                       
   176:     t.is(docs.length, 1);                                    
   177:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:187

   186:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/‚Ä¶
   187:     t.regex(data, /J'ai perdu la meÃÅmoire/);                            
   188:   }                                                                     

  Value must match expression:

  'Hello World'

  Regular expression:

  /J'ai perdu la meÃÅmoire/


üßπ Stop and remove Docker containers...
