
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const express = require('express')
      const app = express()
      const name = ''
      const PORT = process.env.PORT || 3000;

      const MongoClient = require("mongodb").MongoClient;

      app.use(bodyParser.urlencoded({
          extended: true
      }))

      // Fonctions MongoDB asynchrones
      async () => {
          await client.connect();
          const database = client.db(MONGODB_DATABASE)
          const client = new MongoClient(MONGODB_URL);
          const collection = db.collection(MONGODB_COLLECTION);

      // Route post '/'
      app.post("/", function (req, res) {
          try {
              const lastName = await collection.findOne().sort({
                  field: 'asc',
                  _id: -1
              }).limit(1)

              if (lastName) {
                  res.send("Bienvenue, " + lastName);
              } else {
                  res.send("Il manque votre nom.");
              }
          } catch (err) {
              console.log(err)
          }
      });

      // Route get '/'
      app.get('/', function (req, res) {
          try {
              const lastPerson = await collection.findOne().sort({
                  field: 'asc',
                  _id: -1
              }).limit(1)
              if (lastPerson) {
                  res.send("La dernière personne que j'ai rencontrée est: " + lastPerson)
              } else {
                  res.send("Je n'ai rencontré personne pour l'instant")
              }
          } catch (err) {
              res.send("J'ai perdu la mémoire...")
          }
      })

      }

      // Port utilisé par le serveur
      app.listen(PORT, function () {
          console.log("The server is listening on port", PORT);
      });
  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur Rejected promise returned by test
/usr/src/app/server.js:22
        const lastName = await collection.findOne().sort({
                         ^^^^^
SyntaxError: await is only valid in async function
/usr/src/app/server.js:22
        const lastName = await collection.findOne().sort({
                         ^^^^^

SyntaxError: await is only valid in async function
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)

[SERVER STARTER] ❌ Error: runInDockerBg process exited with 1
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (2) POST / {} -> /Il manque votre nom/ 
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 

  11 tests failed

  package.json permet de démarrer le serveur à l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:110

   109:     const { scripts } = JSON.parse(await runInDocker('cat package.json'…
   110:     t.regex(scripts.start, /node server.js/);                           
   111:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined



  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur


  Rejected promise returned by test. Reason:

  Error {
    cmd: 'docker exec my-running-app sh -c "cat README.md"',
    code: 1,
    killed: false,
    signal: null,
    stderr: `cat: README.md: No such file or directory␊
    `,
    stdout: '',
    message: `Command failed: docker exec my-running-app sh -c "cat README.md"␊
    cat: README.md: No such file or directory␊
    `,
  }



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:190

   189:     );                                                       
   190:     t.is(docs.length, 1);                                    
   191:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:202

   201:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   202:     t.regex(data, /J'ai perdu la mémoire/);                            
   203:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /J'ai perdu la mémoire/


🧹 Stop and remove Docker containers...
