Commentaires:
- la fonction async anonyme n'est jamais appel√©e => le code ne peut pas s'ex√©cuter.
- usage de await dans une fonction non async
- probl√®me de connexion db: l'URL doit √™tre fournie avant l'appel √† connect()
- les variables MONGODB_* ne sont pas d√©finies, elles devaient √™tre r√©cup√©r√©es depuis process.env.
- il manque l'enregistrement du nom en db.
- il manque une reponse dans le cas o√π GET / √©choue.

Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ const express = require('express')
      const app = express()
      const name = ''
      const PORT = process.env.PORT || 3000;

      const MongoClient = require("mongodb").MongoClient;

      app.use(bodyParser.urlencoded({
          extended: true
      }))

      // Fonctions MongoDB asynchrones
      async () => {
          await client.connect();
          const database = client.db(MONGODB_DATABASE)
          const client = new MongoClient(MONGODB_URL);
          const collection = db.collection(MONGODB_COLLECTION);

      // Route post '/'
      app.post("/", function (req, res) {
          try {
              const lastName = await collection.findOne().sort({
                  field: 'asc',
                  _id: -1
              }).limit(1)

              if (lastName) {
                  res.send("Bienvenue, " + lastName);
              } else {
                  res.send("Il manque votre nom.");
              }
          } catch (err) {
              console.log(err)
          }
      });

      // Route get '/'
      app.get('/', function (req, res) {
          try {
              const lastPerson = await collection.findOne().sort({
                  field: 'asc',
                  _id: -1
              }).limit(1)
              if (lastPerson) {
                  res.send("La derni√®re personne que j'ai rencontr√©e est: " + lastPerson)
              } else {
                  res.send("Je n'ai rencontr√© personne pour l'instant")
              }
          } catch (err) {
              res.send("J'ai perdu la m√©moire...")
          }
      })

      }

      // Port utilis√© par le serveur
      app.listen(PORT, function () {
          console.log("The server is listening on port", PORT);
      });
  ‚úî server.js utilise seulement await pour r√©cup√©rer les valeurs promises
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úî package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install
  ‚úñ package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start `t.regex()` must be called with a string
  ‚úñ README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur Rejected promise returned by test
/usr/src/app/server.js:22
        const lastName = await collection.findOne().sort({
                         ^^^^^
SyntaxError: await is only valid in async function
/usr/src/app/server.js:22
        const lastName = await collection.findOne().sort({
                         ^^^^^

SyntaxError: await is only valid in async function
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)

[SERVER STARTER] ‚ùå Error: runInDockerBg process exited with 1
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (2) POST / {} -> /Il manque votre nom/ 
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ 
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ 
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur Rejected promise returned by test
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus Rejected promise returned by test
  ‚îÄ

  package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start

  test-partiel.js:109

   108:     const { scripts } = JSON.parse(await runInDocker('cat package.json'‚Ä¶
   109:     t.regex(scripts.start, /node server.js/);                           
   110:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined

  ‚Ä∫ test.serial (test-partiel.js:109:7)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur

  Rejected promise returned by test. Reason:

  Error {
    cmd: 'docker exec my-running-app sh -c "cat README.md"',
    code: 1,
    killed: false,
    signal: null,
    stderr: `cat: README.md: No such file or directory‚êä
    `,
    stdout: '',
    message: `Command failed: docker exec my-running-app sh -c "cat README.md"‚êä
    cat: README.md: No such file or directory‚êä
    `,
  }

  ‚Ä∫ cat: README.md: No such file or directory
  ‚Ä∫ maybeClose (internal/child_process.js:982:16)
  ‚Ä∫ Process.ChildProcess._handle.onexit (internal/child_process.js:259:5)



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (2) POST / {} -> /Il manque votre nom/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  test-partiel.js:188

   187:     );                                                                  
   188:     t.is(docs.length, 1);                                    
   189:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1

  ‚Ä∫ test-partiel.js:188:7



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  test-partiel.js:200

   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/‚Ä¶
   200:     t.regex(data, /J'ai perdu la meÃÅmoire/);                            
   201:   }                                                                     

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /J'ai perdu la meÃÅmoire/

  ‚Ä∫ test-partiel.js:200:7

  ‚îÄ

  11 tests failed

üßπ Stop and remove Docker containers...
