Remarques:
- les variables d'environnement demandées pour mongodb ont été ignorées.
- confusion dans la logique: insertion db dans endpoint GET au lieu de POST.
- incompréhension sur la structure des documents mongodb: usage d'un attribut `from` non demandé.
- je ne vois pas l'intérêt de diviser le code dans deux fonctions anonymes auto-appelantes.

Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./submissions/1155-node...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const PORT = process.env.PORT || 3000;
      const fs = require("fs");
      const express = require("express");
      const app = express();
      const MongoClient = require('mongodb').MongoClient;
      const uri = process.env.MONGODB_URI || "mongodb+srv://chloe:ecologie@cluster0-ljllu.mongodb.net/test?retryWrites=true&w=majority";


      (async function () {
          try {
              const client = new MongoClient(uri, {
                  useNewUrlParser: true
              });
              await client.connect();
              const data = client.db("nodejs_mongo");
              collection = data.collection("nom");
          } catch (err) {
              console.log(err.stack);
          }

      })();


      (async () => {
          app.get('/', async function (req, res) {

              const namebdd = await collection.find({
                  from: nom
              }).sort({
                  _id: -1
              }).limit(1).toArray();
              if (namebdd) {
                  res.send('La dernière personne que j\'ai rencontrée est: ' + namebdd + '.')
              } else if (namebdd === "") {
                  res.send('Je n\'ai rencontré personne pour l\'instant')
              } else {
                  res.send('J\'ai perdu la mémoire...')
              }

              await collection.insertOne({
                  from: 'nom',
                  msg: req.query.msg
              });
          });


          app.post('/', function (req, res) {
              if (req.body.nom != undefined) {
                  res.send('Bienvenue, ' + req.body.nom + '.')
              } else {
                  res.send('Il manque votre nom.')
              }
          })



          app.listen(PORT, function () {
              console.log("The server is listening on port", PORT);
          });

      });
  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✔ package.json permet de démarrer le serveur à l'aide de npm start
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur 
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (2) POST / {} -> /Il manque votre nom/ 
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 
  ─

  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  test-partiel.js:119

   118:     t.regex(readme, /node server|npm start/);
   119:     t.regex(readme, /npm test|curl/);        
   120:   }                                          

  Value must match expression:

  `setup␊
  git clone https://gitlab.eemi.tech/chloe.guerin/nodejs_chatbot.git␊
  npm install␊
  npm start␊
  ␊
  pour acceder par la suite sur le navigateur:  http://localhost:3000/`

  Regular expression:

  /npm test|curl/

  › test-partiel.js:119:7



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test-partiel.js:167:9



  (2) POST / {} -> /Il manque votre nom/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/

  › test-partiel.js:167:9



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test-partiel.js:167:9



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/

  › test-partiel.js:167:9



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/

  › test-partiel.js:167:9



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/

  › test-partiel.js:167:9



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/

  › test-partiel.js:167:9



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  test-partiel.js:188

   187:     );                                                       
   188:     t.is(docs.length, 1);                                    
   189:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1

  › test-partiel.js:188:7



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  test-partiel.js:200

   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   200:     t.regex(data, /J'ai perdu la mémoire/);                            
   201:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /J'ai perdu la mémoire/

  › test-partiel.js:200:7

  ─

  10 tests failed

🧹 Stop and remove Docker containers...
