
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ // import des dépendance
      const express = require('express');
      const bodyParser = require('body-parser');
      const mongoose  = require('mongoose');
      const { MongoClient } = require('mongodb');
      const options = { server: { socketOptions: { keepAlive: 300000, connectTimeoutMS: 30000 } }, 
          replset: { socketOptions: { keepAlive: 300000, connectTimeoutMS : 30000 } } };

      // config constante
      const port = process.env.port || 3000,
          MONGODB_COLLECTION = process.env.MONGODB_COLLECTION || 'user',
          MONGODB_DATABASE = process.env.MONGODB_DATABASE || 'apiNom',
          MONGODB_URL = process.env.MONGODB_URL || 'mongodb://localhost:27017/apiNom';

      // init mongodb
      const client = new MongoClient(MONGODB_URL);
      mongoose.connect(MONGODB_URL, options);

      // create du schema user
      const userSchema = mongoose.Schema({
          nom: String
      })
      const User = mongoose.model('User', userSchema)

      // config express
      const app = express();

      app.use(bodyParser.urlencoded({extended: true}))

      app.get('/', async (req, res) => {
          try {
              const lastUser = await User.findOne().sort({ field: 'asc', _id: -1 }).limit(1)
              if (lastUser) {
                  res.send("La dernière personne que j'ai rencontrée est: " + lastUser.nom + ".");
              } else {
                  res.send("Je n'ai rencontré personne pour l'instant")
              }
          } catch (err) {
              res.send("J'ai perdu la mémoire...");
          }
      })

      app.post('/', (req, res) => {
          console.log(MONGODB_URL)
          if (req.body.nom) {
              const user = new User();
              user.nom = req.body.nom;
              user.save();
              res.send("Bienvenue, " + user.nom + '.');
          } else {
              res.send('Il manque votre nom.')
          }
      })

      // lance le serv
      app.listen(port, () => {
          console.log('app listen on http://localhost:' + port)
      })
  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✖ package.json permet d'installer les dépendances nécessaires à l'aide de npm install 
  ✔ package.json permet de démarrer le serveur à l'aide de npm start
  ✔ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur
[MONGODB SERVER] [31m[2020-07-18 07:34:01.658] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'users' of undefined
[MONGODB SERVER] [31m[2020-07-18 07:34:03.651] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'users' of undefined
[MONGODB SERVER] [31m[2020-07-18 07:34:05.670] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'users' of undefined
  ✖ le serveur répond sur le port 3000 Rejected promise returned by test
[MONGODB SERVER] [31m[2020-07-18 07:34:06.701] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'users' of undefined
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✔ (2) POST / {} -> /Il manque votre nom/
[MONGODB SERVER] [31m[2020-07-18 07:34:07.744] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'users' of undefined
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✔ (4) POST / "nom=adrien" -> /Bienvenue, adrien/
[MONGODB SERVER] [31m[2020-07-18 07:34:08.782] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'users' of undefined
[MONGODB SERVER] [31m[2020-07-18 07:34:08.783] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'users' of undefined
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✔ (6) POST / "nom=michelle" -> /Bienvenue, michelle/
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
(node) UnhandledPromiseRejectionWarning: MongoNetworkError: connection 0 to localhost:27027 closed
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 

  8 tests failed

  package.json permet d'installer les dépendances nécessaires à l'aide de npm install

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:91

   90:     t.true(deps.includes('express'));
   91:     t.true(deps.includes('mongodb'));
   92:   }                                  

  Value is not `true`:

  false



  le serveur répond sur le port 3000


  Rejected promise returned by test. Reason:

  Error {
    cmd: 'PORT=3000 ./wait-for-student-server.sh',
    code: 1,
    killed: false,
    signal: null,
    stderr: '',
    stdout: `␊
    Wait for server on port 3000...␊
    (1)␊
    (2)␊
    (3)␊
    ❌  Server is NOT listening on port 3000.␊
    `,
    message: `Command failed: PORT=3000 ./wait-for-student-server.sh␊
    `,
  }



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:183

   182:     );                                                       
   183:     t.is(docs.length, 1);                                    
   184:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:194

   193:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   194:     t.regex(data, /J'ai perdu la mémoire/);                            
   195:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /J'ai perdu la mémoire/


🧹 Stop and remove Docker containers...
