
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const express = require('express');
      require("dotenv").config();

      const app = express();

      const PORT = process.env.PORT || 3000;

      const MongoClient = require('mongodb').MongoClient;
      const URL = process.env.MONGODB_URL;
      const MongoCollection = process.env.MONGODB_MongoCollection;
      const MongoDB = process.env.MONGODB_DATABASE;


      let ERROR_SERV = false; 

      ( async() => {
          const client = new MongoClient(URL);
          try {
              await client.connect();
          } catch (err) {
              console.error(err);
              ERROR_SERV = true;
          }

          app.post('/', async function (req, res) {
              const db = client.db(MongoDB);

              if (req.body.nom != undefined) {
                  await db.MongoCollection(MongoCollection).insertOne({ nom: req.body.nom });
                  res.send('Bienvenue, ' + req.body.nom + '.') 
              } else {
                  res.send('Il manque votre nom.')
              }
          })

          app.get('/', async function (req, res) {
              if (ERROR_SERV) {
                  res.send("J'ai perdu la mémoire...")
              }
              const db = client.db(MongoDB);
              const col = db.MongoCollection(MongoCollection);
              let last = await col.find().sort({ _id: -1 }).limit(1).toArray();

              if (last[0].nom) {
                  res.send("La dernière personne que j'ai rencontrée est: " + last[0].nom + ".")
              } else {
                  res.send("Je n'ai rencontré personne pour l'instant")
              }
          })
      })();


      app.use(express.json());
      app.listen(PORT, () => console.log('Server is listening on port',PORT))
  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✖ package.json permet d'installer les dépendances nécessaires à l'aide de npm install 
  ✔ package.json permet de démarrer le serveur à l'aide de npm start
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur 
TypeError [ERR_INVALID_ARG_TYPE]: The "url" argument must be of type string. Received type undefined
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 3)
  ✖ (2) POST / {} -> /Il manque votre nom/ 
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function

  11 tests failed

  package.json permet d'installer les dépendances nécessaires à l'aide de npm install

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:107

   106: test.serial(                                                           
   107:   `package.json permet de démarrer le serveur à l'aide de npm start`,
   108:   async t => {                                                         

  Value is not `true`:

  false



  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:124

   123:                                                                         
   124: // Exigences fonctionnelles (exécutés au retour de t.context.serverStar…
   125:                                                                         

  Value must match expression:

  `# Partiel 1317␊
  Programme qui envoie un nom en méthode post et qui le stocke dans une bdd Mongodb.<br>␊
  Récupérer le nom mit en get<br>␊
  ␊
  ## Usage, quelques exemples␊
  * $ curl -X POST --header "Content-Type: application/json" --data "{\\"nom\\":\\"Toto\\"}" http://localhost:3000␊
   répondra Bienvenue, Toto␊
  ␊
  ## Installation␊
  Installer les dépendances : `npm install`<br>␊
  ␊
  `

  Regular expression:

  /node server|npm start/



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172: }           
   173:             
   174: test.serial(

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172: }           
   173:             
   174: test.serial(

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Il manque votre nom/



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172: }           
   173:             
   174: test.serial(

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172: }           
   173:             
   174: test.serial(

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172: }           
   173:             
   174: test.serial(

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172: }           
   173:             
   174: test.serial(

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172: }           
   173:             
   174: test.serial(

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:195

   194: );          
   195:             
   196: test.serial(

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:207

   206: // TODO:                                                                
   207: // - Le serveur doit *se souvenir* du dernier `nom` transmis à `POST /`…
   208:                                                                         

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /J'ai perdu la mémoire/


🧹 Stop and remove Docker containers...
