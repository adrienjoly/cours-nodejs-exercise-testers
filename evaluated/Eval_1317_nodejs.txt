
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const express = require('express');
      require("dotenv").config();

      const app = express();

      const PORT = process.env.PORT || 3000;

      const MongoClient = require('mongodb').MongoClient;
      const URL = process.env.MONGODB_URL;
      const MongoCollection = process.env.MONGODB_MongoCollection;
      const MongoDB = process.env.MONGODB_DATABASE;


      let ERROR_SERV = false; 

      ( async() => {
          const client = new MongoClient(URL);
          try {
              await client.connect();
          } catch (err) {
              console.error(err);
              ERROR_SERV = true;
          }

          app.post('/', async function (req, res) {
              const db = client.db(MongoDB);

              if (req.body.nom != undefined) {
                  await db.MongoCollection(MongoCollection).insertOne({ nom: req.body.nom });
                  res.send('Bienvenue, ' + req.body.nom + '.') 
              } else {
                  res.send('Il manque votre nom.')
              }
          })

          app.get('/', async function (req, res) {
              if (ERROR_SERV) {
                  res.send("J'ai perdu la mémoire...")
              }
              const db = client.db(MongoDB);
              const col = db.MongoCollection(MongoCollection);
              let last = await col.find().sort({ _id: -1 }).limit(1).toArray();

              if (last[0].nom) {
                  res.send("La dernière personne que j'ai rencontrée est: " + last[0].nom + ".")
              } else {
                  res.send("Je n'ai rencontré personne pour l'instant")
              }
          })
      })();


      app.use(express.json());
      app.listen(PORT, () => console.log('Server is listening on port',PORT))
  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✖ package.json permet d'installer les dépendances nécessaires à l'aide de npm install 
  ✔ package.json permet de démarrer le serveur à l'aide de npm start
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur 
TypeError [ERR_INVALID_ARG_TYPE]: The "url" argument must be of type string. Received type undefined
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
  ✖ (2) POST / {} -> /Il manque votre nom/ 
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
(node) UnhandledPromiseRejectionWarning: TypeError: client.db is not a function
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 
  ─

  package.json permet d'installer les dépendances nécessaires à l'aide de npm install

  test-partiel.js:101

   100:     t.true(deps.includes('express'));
   101:     t.true(deps.includes('mongodb'));
   102:   }                                  

  Value is not `true`:

  false

  › test.serial (test-partiel.js:101:11)



  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  test-partiel.js:118

   117:     t.regex(readme, /npm i/);                
   118:     t.regex(readme, /node server|npm start/);
   119:     t.regex(readme, /npm test|curl/);        

  Value must match expression:

  `# Partiel 1317␊
  Programme qui envoie un nom en méthode post et qui le stocke dans une bdd Mongodb.<br>␊
  Récupérer le nom mit en get<br>␊
  ␊
  ## Usage, quelques exemples␊
  * $ curl -X POST --header "Content-Type: application/json" --data "{\\"nom\\":\\"Toto\\"}" http://localhost:3000␊
   répondra Bienvenue, Toto␊
  ␊
  ## Installation␊
  Installer les dépendances : `npm install`<br>␊
  ␊
  `

  Regular expression:

  /node server|npm start/

  › test.serial (test-partiel.js:118:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (2) POST / {} -> /Il manque votre nom/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Il manque votre nom/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Bienvenue, adrien/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Bienvenue, michelle/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  test-partiel.js:188

   187:     );                                                       
   188:     t.is(docs.length, 1);                                    
   189:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1

  › test.serial (test-partiel.js:188:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  test-partiel.js:200

   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   200:     t.regex(data, /J'ai perdu la mémoire/);                            
   201:   }                                                                     

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /J'ai perdu la mémoire/

  › test.serial (test-partiel.js:200:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)

  ─

  11 tests failed

🧹 Stop and remove Docker containers...
