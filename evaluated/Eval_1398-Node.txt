
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const express = require("express");
      const fs = require("fs");
      const responsePath = "réponses.json";
      const mongoUri = 'mongodb+srv://1398:1398@cluster0.nkszc.mongodb.net/<dbname>?retryWrites=true&w=majority';
      const MONGO_URL = 'mongodb+srv://1398:1398@cluster0.nkszc.mongodb.net/<dbname>?retryWrites=true&w=majority';
      const bodyParser = require('body-parser')

      const MongoClient = require("mongodb").MongoClient;

      const app = express();

      express.json()

      app.use(
        bodyParser.urlencoded({
          extended: true
        })
      );

      app.post('/', function (req, res) {
        if (req.body.nom != undefined) {
            res.send('Bienvenue, '+req.body.nom+'.') 
        } else {
            res.send('Il manque votre nom.')
        }
      });

      async function getNom() {
        const client = new MongoClient(mongoUri);

        try {
          await client.connect();
          console.log("Connected to server");
          const db = client.db("1398");
          const collection = db.collection("1398-nom");

          // Récuperer la collection nom in an array
          const response = await collection.find({}).toArray();
          return response;
        } catch (err) {
          console.log(err);
        }

        client.close();
      }

      app.get("/", async (req, res) => {
        const result = await getNom();
        res.send(result); 
      });

      const PORT = process.env.PORT || 3000;

      app.listen(PORT, () => {
        console.log(`Server listening on ${PORT}`);
      });

  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✖ package.json permet d'installer les dépendances nécessaires à l'aide de npm install 
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✔ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ `t.regex()` must be called with a string
  ✔ (2) POST / {} -> /Il manque votre nom/
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ `t.regex()` must be called with a string
  ✔ (4) POST / "nom=adrien" -> /Bienvenue, adrien/
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ `t.regex()` must be called with a string
  ✔ (6) POST / "nom=michelle" -> /Bienvenue, michelle/
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ `t.regex()` must be called with a string
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus `t.regex()` must be called with a string

  8 tests failed

  package.json permet d'installer les dépendances nécessaires à l'aide de npm install

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:102

   101:     t.true(deps.includes('express'));
   102:     t.true(deps.includes('mongodb'));
   103:   }                                  

  Value is not `true`:

  false



  package.json permet de démarrer le serveur à l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:110

   109:     const { scripts } = JSON.parse(await runInDocker('cat package.json'…
   110:     t.regex(scripts.start, /node server.js/);                           
   111:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  `t.regex()` must be called with a string

  Called with:

  [
    {
      _id: '5f034e6cdd6b92d722c4ef5d',
      name: 'cc',
    },
  ]



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  `t.regex()` must be called with a string

  Called with:

  [
    {
      _id: '5f034e6cdd6b92d722c4ef5d',
      name: 'cc',
    },
  ]



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  `t.regex()` must be called with a string

  Called with:

  [
    {
      _id: '5f034e6cdd6b92d722c4ef5d',
      name: 'cc',
    },
  ]



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  `t.regex()` must be called with a string

  Called with:

  [
    {
      _id: '5f034e6cdd6b92d722c4ef5d',
      name: 'cc',
    },
  ]



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:190

   189:     );                                                       
   190:     t.is(docs.length, 1);                                    
   191:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:202

   201:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   202:     t.regex(data, /J'ai perdu la mémoire/);                            
   203:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  [
    {
      _id: '5f034e6cdd6b92d722c4ef5d',
      name: 'cc',
    },
  ]


🧹 Stop and remove Docker containers...
