Remarques:
- l'algorithme respecte ce qui √©tait demand√©, en soi.
- par contre la syntaxe du langage JS et l'usage de MongoDB ne sont pas acquis.
- les variables d'environnement demand√©es n'ont pas √©t√© respect√©es.
- en termes de lisibilit√©, on sent un laisser aller vers la fin du fichier.

Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ var express = require('express')
      var app = express()

      const MONGODB_DATABASE = require('mongodb').MongoClient;

      const MONGODB_URL ="mongodb://localhost:27017"

      async function insertName(name) {

        console.log('connected');
        const client = new MongoClient(url);

        try {
          await client.connect();
          console.log('Connected');
          const dbName = client.db('db-name');
          const MANGODB_COLLECTION = dbName.collection('messages');

          await collection.insertOne({
      	    name: name
          });

          console.log('Messages ins√©r√©s')
        } catch (err) {
          console.log(err.stack);
        }
        client.close();
      }


      async function getName() {
        const client = new MANGODB_DATABASE(MANGODB_URL);

        try {
          await client.connect();
          console.log('Connected');
          const dbName = client.db('db-name');
          const MANGODB_COLLECTION = dbName.collection('historique');

          const lastname = await collection.find({}).toArray();
   

        } catch (err) {
          console.log(err.stack);
        }

        client.close();
      }


      // GET method route
      app.get('/nom', function (req, res) {
        if (rep.query.nom === undefined) {
                res.send('Il manque votre nom.');
        } else (
              res.send('Bienvenue, ${req.query.nom}')
      	await insertName(name, req.body.msg);

      })

      // POST method route
      app.post('/', function (req, res) {
      	if ($lastname) {
        res.send("La derni√®re personne que j'ai rencontr√©es est: ${lastname}. ");
      	}
      	else if {MANGODB_COLLECTION) {
        res.send("Je n'ai rencontr√© personne pour l'instant");
      	else {
      	res.send("J'ai perdu la m√©moire...");
      	}
        } 
      })

      app.listen(PORT, function () {
          console.log("The server is listening on port", PORT);
        });

  ‚úî server.js utilise seulement await pour r√©cup√©rer les valeurs promises
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úî package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install
  ‚úî package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start
  ‚úñ README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur 
/usr/src/app/server.js:57
	await insertName(name, req.body.msg);
	^^^^^
SyntaxError: Unexpected reserved word
/usr/src/app/server.js:57
	await insertName(name, req.body.msg);
	^^^^^

SyntaxError: Unexpected reserved word
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)

[SERVER STARTER] ‚ùå Error: runInDockerBg process exited with 1
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (2) POST / {} -> /Il manque votre nom/ 
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ 
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ 
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur Rejected promise returned by test
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus Rejected promise returned by test
  ‚îÄ

  README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur

  test-partiel.js:117

   116:     const readme = await runInDocker('cat README.md');
   117:     t.regex(readme, /npm i/);                         
   118:     t.regex(readme, /node server|npm start/);         

  Value must match expression:

  ''

  Regular expression:

  /npm i/

  ‚Ä∫ test.serial (test-partiel.js:117:7)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (2) POST / {} -> /Il manque votre nom/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  test-partiel.js:186

   185:     const docs = JSON.parse(                                            
   186:       await mongoInDocker.runClientFct(mongo.connectionString, clientFc‚Ä¶
   187:     );                                                                  

  Rejected promise returned by test. Reason:

  TypeError {
    message: 'Cannot read property \'connectionString\' of undefined',
  }

  ‚Ä∫ test.serial (test-partiel.js:186:46)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  test-partiel.js:198

   197:     const { mongo } = await t.context.serverStarted(t);                 
   198:     killSync(mongo.pid); // kill mongodb server                         
   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/‚Ä¶

  Rejected promise returned by test. Reason:

  TypeError {
    message: 'Cannot read property \'pid\' of undefined',
  }

  ‚Ä∫ test.serial (test-partiel.js:198:20)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)

  ‚îÄ

  10 tests failed

üßπ Stop and remove Docker containers...
