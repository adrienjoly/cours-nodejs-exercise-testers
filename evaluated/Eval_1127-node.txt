
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ var express = require('express')
      var app = express()

      const MONGODB_DATABASE = require('mongodb').MongoClient;

      const MONGODB_URL ="mongodb://localhost:27017"

      async function insertName(name) {

        console.log('connected');
        const client = new MongoClient(url);

        try {
          await client.connect();
          console.log('Connected');
          const dbName = client.db('db-name');
          const MANGODB_COLLECTION = dbName.collection('messages');

          await collection.insertOne({
      	    name: name
          });

          console.log('Messages insérés')
        } catch (err) {
          console.log(err.stack);
        }
        client.close();
      }


      async function getName() {
        const client = new MANGODB_DATABASE(MANGODB_URL);

        try {
          await client.connect();
          console.log('Connected');
          const dbName = client.db('db-name');
          const MANGODB_COLLECTION = dbName.collection('historique');

          const lastname = await collection.find({}).toArray();
   

        } catch (err) {
          console.log(err.stack);
        }

        client.close();
      }


      // GET method route
      app.get('/nom', function (req, res) {
        if (rep.query.nom === undefined) {
                res.send('Il manque votre nom.');
        } else (
              res.send('Bienvenue, ${req.query.nom}')
      	await insertName(name, req.body.msg);

      })

      // POST method route
      app.post('/', function (req, res) {
      	if ($lastname) {
        res.send("La dernière personne que j'ai rencontrées est: ${lastname}. ");
      	}
      	else if {MANGODB_COLLECTION) {
        res.send("Je n'ai rencontré personne pour l'instant");
      	else {
      	res.send("J'ai perdu la mémoire...");
      	}
        } 
      })

      app.listen(PORT, function () {
          console.log("The server is listening on port", PORT);
        });

  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✔ package.json permet de démarrer le serveur à l'aide de npm start
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur 
/usr/src/app/server.js:57
	await insertName(name, req.body.msg);
	^^^^^
SyntaxError: Unexpected reserved word
/usr/src/app/server.js:57
	await insertName(name, req.body.msg);
	^^^^^

SyntaxError: Unexpected reserved word
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)

  ✖ le serveur répond sur le port 3000 Rejected promise returned by test
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (2) POST / {} -> /Il manque votre nom/ 
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 

  11 tests failed

  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:107

   106:     const readme = await runInDocker('cat README.md');
   107:     t.regex(readme, /npm i/);                         
   108:     t.regex(readme, /node server|npm start/);         

  Value must match expression:

  ''

  Regular expression:

  /npm i/



  le serveur répond sur le port 3000

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/runInDocker.js:67

   66:       logs.forEach(str => console.error(str));                       
   67:       reject(new Error('runInDockerBg process exited with ' + data));
   68:     });                                                              

  Rejected promise returned by test. Reason:

  Error {
    message: 'runInDockerBg process exited with 1',
  }



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:183

   182:     );                                                       
   183:     t.is(docs.length, 1);                                    
   184:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:194

   193:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   194:     t.regex(data, /J'ai perdu la mémoire/);                            
   195:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /J'ai perdu la mémoire/


🧹 Stop and remove Docker containers...
