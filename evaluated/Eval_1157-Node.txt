
Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ const express = require('express')
      const app = express()
      const bodyParser = require('body-parser')
      const MongoClient = require('mongodb').MongoClient;

      process.env['port'] = "3000";
      process.env['MANGODB_URL'] = "mongodb+srv://chatbot:chatbot@firstclassapi-fummx.azure.mongodb.net/partielnode?retryWrites=true&w=majority"
      process.env['MANGODB_DATABASE'] = "partiel-node"
      process.env['MANGODB_COLLECTION'] = "names"


      const client = new MongoClient(process.env.MONGODB_URL, { useNewUrlParser: true, useUnifiedTopology: true });


      (async () => {
          try {

              await client.connect();
              const db = client.db(process.env.MONGODB_DATABASE);
              const callName = db.collection(process.env.MONGODB_COLLECTION)

              app.use(bodyParser.urlencoded({
                  extended: true
              }));

              app.get('/', async function (req, res) {
                  const name = await callName.find({}).toArray();
                  res.send('Hello World!')
              })

              app.post('/', async function (req, res) {
                  if (req.body.nom === undefined) {
                      res.send('Il manque votre nom.')
                  } else {
                      const addName = await callName.insertOne({ nom: req.body.nom })
                      res.send('Bienvenue, ' + req.body.nom + '.')
                  }
              })

              app.listen(process.even.PORT, function () {
                  console.log('Le serveur fonctionne sur le port ' + process.env.PORT)
              })

          } catch (err) {

          }
      })()
  ‚úî server.js utilise seulement await pour r√©cup√©rer les valeurs promises
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úî package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install
  ‚úî package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start
  ‚úñ README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur 
  ‚úñ le serveur r√©pond sur le port 3000 Rejected promise returned by test
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ Rejected promise returned by test
  ‚úñ (2) POST / {} -> /Il manque votre nom/ Rejected promise returned by test
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ Rejected promise returned by test
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ Rejected promise returned by test
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ Rejected promise returned by test
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ Rejected promise returned by test
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ Rejected promise returned by test
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus Rejected promise returned by test

  11 tests failed

  README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:102

   101:     const readme = await runInDocker('cat README.md');
   102:     t.regex(readme, /npm i/);                         
   103:     t.regex(readme, /node server|npm start/);         

  Value must match expression:

  `# Application tests‚êç‚êä
  ‚êç‚êä
  $ curl http://localhost:3000/‚êç‚êä
  $ curl -X POST --header "Content-Type: application/x-www-form-urlencoded" --data "nom=VotrePr√©nom" http://localhost:3000/‚êç‚êä
  ‚êç‚êä
  # Installation‚êç‚êä
  ‚êç‚êä
  cd 1157-Node.js‚êç‚êä
  Npm init‚êç‚êä
  Npm start‚êç‚êä
  node server.js‚êç‚êä
  ‚êç‚êä
  `

  Regular expression:

  /npm i/



  le serveur r√©pond sur le port 3000


  Rejected promise returned by test. Reason:

  Error {
    cmd: 'PORT=3000 ./wait-for-student-server.sh',
    code: 1,
    killed: false,
    signal: null,
    stderr: '',
    stdout: `‚êä
    Wait for server on port 3000...‚êä
    (1)‚êä
    (2)‚êä
    (3)‚êä
    ‚ùå  Server is NOT listening on port 3000.‚êä
    `,
    message: `Command failed: PORT=3000 ./wait-for-student-server.sh‚êä
    `,
  }



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/


  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNRESET',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'socket hang up',
  }



  (2) POST / {} -> /Il manque votre nom/


  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNRESET',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'post',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `POST / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        Content-Type: application/x-www-form-urlencoded‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        Content-Length: 0‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'POST',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: true,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'POST',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'socket hang up',
  }



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/


  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNRESET',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'socket hang up',
  }



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/


  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNRESET',
    config: {
      adapter: Function httpAdapter {},
      data: 'nom=adrien',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Length': 10,
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'post',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: null,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `POST / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        Content-Type: application/x-www-form-urlencoded‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Content-Length: 10‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'POST',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: true,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'POST',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [
        Object { ‚Ä¶ },
      ],
      _requestBodyLength: 10,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'socket hang up',
  }



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/


  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNRESET',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'socket hang up',
  }



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/


  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNRESET',
    config: {
      adapter: Function httpAdapter {},
      data: 'nom=michelle',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Length': 12,
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'post',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: null,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `POST / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        Content-Type: application/x-www-form-urlencoded‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Content-Length: 12‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'POST',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: true,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'POST',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [
        Object { ‚Ä¶ },
      ],
      _requestBodyLength: 12,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'socket hang up',
  }



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/


  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNRESET',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'socket hang up',
  }



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:178

   177:     );                                                       
   178:     t.is(docs.length, 1);                                    
   179:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus


  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNRESET',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: undefined,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: null,
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'socket hang up',
  }


üßπ Stop and remove Docker containers...
