Remarques:
- fichier js invalide et quasi-vide.
- aucune trace du moindre acquis...

Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ let http = require('http')

      http.createServer(

      server.on('request', (request, response) => {
   

          response.end('nom')
      }))

      server.listen(80)
  ‚úñ server.js utilise seulement await pour r√©cup√©rer les valeurs promises 
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úñ package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install Rejected promise returned by test
  ‚úñ package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start Rejected promise returned by test
  ‚úñ README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur Rejected promise returned by test
{ Error: Command failed: docker exec my-running-app sh -c "npm install --no-audit"
npm ERR! code EJSONPARSE
npm ERR! file /usr/src/app/package.json
npm ERR! JSON.parse Failed to parse json
npm ERR! JSON.parse Unexpected end of JSON input while parsing near ''
npm ERR! JSON.parse Failed to parse package.json data.
npm ERR! JSON.parse package.json must be actual JSON, not just JavaScript.

npm ERR! A complete log of this run can be found in:
npm ERR!     /root/.npm/_logs/2020-07-18T09_31_19_902Z-debug.log

    at ChildProcess.exithandler (child_process.js:294:12)
    at ChildProcess.emit (events.js:198:13)
    at maybeClose (internal/child_process.js:982:16)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:259:5)
  killed: false,
  code: 1,
  signal: null,
  cmd: 'docker exec my-running-app sh -c "npm install --no-audit"',
  stdout: '',
  stderr:
   'npm ERR! code EJSONPARSE\nnpm ERR! file /usr/src/app/package.json\nnpm ERR! JSON.parse Failed to parse json\nnpm ERR! JSON.parse Unexpected end of JSON input while parsing near \'\'\nnpm ERR! JSON.parse Failed to parse package.json data.\nnpm ERR! JSON.parse package.json must be actual JSON, not just JavaScript.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /root/.npm/_logs/2020-07-18T09_31_19_902Z-debug.log\n' }
/usr/src/app/server.js:5
server.on('request', (request, response) => {
^
ReferenceError: server is not defined
/usr/src/app/server.js:5
server.on('request', (request, response) => {
^

ReferenceError: server is not defined
    at Object.<anonymous> (/usr/src/app/server.js:5:1)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)

[SERVER STARTER] ‚ùå Error: runInDockerBg process exited with 1
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (2) POST / {} -> /Il manque votre nom/ 
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ 
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ 
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur Rejected promise returned by test
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus Rejected promise returned by test
  ‚îÄ

  server.js utilise seulement await pour r√©cup√©rer les valeurs promises

  test-partiel.js:79

   78:     const { serverSource } = t.context;  
   79:     t.regex(serverSource, /await/);      
   80:     t.notRegex(serverSource, /\.then\(/);

  Value must match expression:

  `let http = require('http')‚êä
  ‚êä
  http.createServer(‚êä
  ‚êä
  server.on('request', (request, response) => {‚êä
     ‚êä
  ‚êä
      response.end('nom')‚êä
  }))‚êä
  ‚êä
  server.listen(80)`

  Regular expression:

  /await/

  ‚Ä∫ test.serial.t (test-partiel.js:79:7)



  package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install

  test-partiel.js:98

   97:   async t => {                                                           
   98:     const { dependencies } = JSON.parse(await runInDocker('cat package.j‚Ä¶
   99:     const deps = Object.keys(dependencies);                              

  Rejected promise returned by test. Reason:

  SyntaxError {
    message: 'Unexpected end of JSON input',
  }

  ‚Ä∫ JSON.parse (<anonymous>)
  ‚Ä∫ test.serial (test-partiel.js:98:35)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start

  test-partiel.js:108

   107:   async t => {                                                          
   108:     const { scripts } = JSON.parse(await runInDocker('cat package.json'‚Ä¶
   109:     t.regex(scripts.start, /node server.js/);                           

  Rejected promise returned by test. Reason:

  SyntaxError {
    message: 'Unexpected end of JSON input',
  }

  ‚Ä∫ JSON.parse (<anonymous>)
  ‚Ä∫ test.serial (test-partiel.js:108:30)



  README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur

  Rejected promise returned by test. Reason:

  Error {
    cmd: 'docker exec my-running-app sh -c "cat README.md"',
    code: 1,
    killed: false,
    signal: null,
    stderr: `cat: README.md: No such file or directory‚êä
    `,
    stdout: '',
    message: `Command failed: docker exec my-running-app sh -c "cat README.md"‚êä
    cat: README.md: No such file or directory‚êä
    `,
  }

  ‚Ä∫ cat: README.md: No such file or directory
  ‚Ä∫ maybeClose (internal/child_process.js:982:16)
  ‚Ä∫ Socket.stream.socket.on (internal/child_process.js:389:11)



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (2) POST / {} -> /Il manque votre nom/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  ‚Ä∫ test.serial (test-partiel.js:167:9)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  test-partiel.js:186

   185:     const docs = JSON.parse(                                            
   186:       await mongoInDocker.runClientFct(mongo.connectionString, clientFc‚Ä¶
   187:     );                                                                  

  Rejected promise returned by test. Reason:

  TypeError {
    message: 'Cannot read property \'connectionString\' of undefined',
  }

  ‚Ä∫ test.serial (test-partiel.js:186:46)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  test-partiel.js:198

   197:     const { mongo } = await t.context.serverStarted(t);                 
   198:     killSync(mongo.pid); // kill mongodb server                         
   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/‚Ä¶

  Rejected promise returned by test. Reason:

  TypeError {
    message: 'Cannot read property \'pid\' of undefined',
  }

  ‚Ä∫ test.serial (test-partiel.js:198:20)
  ‚Ä∫ process._tickCallback (internal/process/next_tick.js:68:7)

  ‚îÄ

  13 tests failed

üßπ Stop and remove Docker containers...
