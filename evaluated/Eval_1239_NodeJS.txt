
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const PORT = process.env.PORT || 3000;
      const express = require("express");
      const bodyParser = require("body-parser");
      const app = express();
      const MongoClient = require('mongodb').MongoClient;
      const url = process.env.MONGODB_URL 

      app.use(bodyParser.urlencoded({
          extended: true
      }));

      app.post("/", function (req, res) {
          if (req.query.nom != undefined) {
              res.send("Bienvenue, " + req.query.nom + ".");
          } else {
              res.send("Il manque votre nom.");
          }
      })

      app.get("/", function (req, res) {
          res.send("La dernière personne que j'ai rencontrée est: " +)
      })

      (async function () {
          try {
              const client = new MongoClient(url, {
                  useNewUrlParser: true
              });
              await client.connect();
              const MONGODB_DATABASE = process.env.MONGODB_DATABASE;
              const MONGODB_COLLECTION = process.env.MONGODB_COLLECTION;
          } catch (err) {
              console.log(err);
          }
      })();

      app.listen(PORT, function () {
          console.log("The server is listening on port", PORT);
      });
  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur 
/usr/src/app/server.js:21
    res.send("La dernière personne que j'ai rencontrée est: " +)
                                                               ^
SyntaxError: Unexpected token )
/usr/src/app/server.js:21
    res.send("La dernière personne que j'ai rencontrée est: " +)
                                                               ^

SyntaxError: Unexpected token )
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)

[SERVER STARTER] ❌ Error: runInDockerBg process exited with 1
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (2) POST / {} -> /Il manque votre nom/ 
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur Rejected promise returned by test
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus Rejected promise returned by test
  ─

  package.json permet de démarrer le serveur à l'aide de npm start

  test-partiel.js:109

   108:     const { scripts } = JSON.parse(await runInDocker('cat package.json'…
   109:     t.regex(scripts.start, /node server.js/);                           
   110:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined

  › test.serial (test-partiel.js:109:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  test-partiel.js:119

   118:     t.regex(readme, /node server|npm start/);
   119:     t.regex(readme, /npm test|curl/);        
   120:   }                                          

  Value must match expression:

  `Pour installer ce projet il faut : ␊
  - cloner le projet avec la commande suivante : ␊
  	# git clone https://gitlab.com/manon.lebihan/chatbot.git␊
   - puis installer avec :␊
  	# npm install␊
  - et enfin le lancer avec :␊
  	# npm start␊
  ␊
      Ce programme a plusieurs points d'netrée qui font plusieurs choses différentes.␊
  ␊
      La route get "/" retourne soit : ␊
      -"La dernière personne que j'ai rencontrée est:" suivi du nom du dernier nom entré.␊
      -"Je n'ai rencontré personne pour l'instant" si aucun nom n'a été rentré.␊
      -"J'ai perdu la mémoire..." s'il y a un problème pour récupérer les données.␊
  ␊
      La route post "/" qui retourne "Bienvenue" et le nom entré par l'utilisateur soit "Il manque votre nom" s'il n'y a pas de nom rentré.`

  Regular expression:

  /npm test|curl/

  › test.serial (test-partiel.js:119:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (2) POST / {} -> /Il manque votre nom/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  test-partiel.js:186

   185:     const docs = JSON.parse(                                            
   186:       await mongoInDocker.runClientFct(mongo.connectionString, clientFc…
   187:     );                                                                  

  Rejected promise returned by test. Reason:

  TypeError {
    message: 'Cannot read property \'connectionString\' of undefined',
  }

  › test.serial (test-partiel.js:186:46)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  test-partiel.js:198

   197:     const { mongo } = await t.context.serverStarted(t);                 
   198:     killSync(mongo.pid); // kill mongodb server                         
   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…

  Rejected promise returned by test. Reason:

  TypeError {
    message: 'Cannot read property \'pid\' of undefined',
  }

  › test.serial (test-partiel.js:198:20)
  › process._tickCallback (internal/process/next_tick.js:68:7)

  ─

  11 tests failed

🧹 Stop and remove Docker containers...
