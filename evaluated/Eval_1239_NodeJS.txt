
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const PORT = process.env.PORT || 3000;
      const express = require("express");
      const bodyParser = require("body-parser");
      const app = express();
      const MongoClient = require('mongodb').MongoClient;
      const url = process.env.MONGODB_URL 

      app.use(bodyParser.urlencoded({
          extended: true
      }));

      app.post("/", function (req, res) {
          if (req.query.nom != undefined) {
              res.send("Bienvenue, " + req.query.nom + ".");
          } else {
              res.send("Il manque votre nom.");
          }
      })

      app.get("/", function (req, res) {
          res.send("La dernière personne que j'ai rencontrée est: " +)
      })

      (async function () {
          try {
              const client = new MongoClient(url, {
                  useNewUrlParser: true
              });
              await client.connect();
              const MONGODB_DATABASE = process.env.MONGODB_DATABASE;
              const MONGODB_COLLECTION = process.env.MONGODB_COLLECTION;
          } catch (err) {
              console.log(err);
          }
      })();

      app.listen(PORT, function () {
          console.log("The server is listening on port", PORT);
      });
  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur 
/usr/src/app/server.js:21
    res.send("La dernière personne que j'ai rencontrée est: " +)
                                                               ^
SyntaxError: Unexpected token )
/usr/src/app/server.js:21
    res.send("La dernière personne que j'ai rencontrée est: " +)
                                                               ^

SyntaxError: Unexpected token )
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)

[SERVER STARTER] ❌ Error: runInDockerBg process exited with 1
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (2) POST / {} -> /Il manque votre nom/ 
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 

  11 tests failed

  package.json permet de démarrer le serveur à l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:115

   114:     const { scripts } = JSON.parse(await runInDocker('cat package.json'…
   115:     t.regex(scripts.start, /node server.js/);                           
   116:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined



  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:125

   124:     t.regex(readme, /node server|npm start/);
   125:     t.regex(readme, /npm test|curl/);        
   126:   }                                          

  Value must match expression:

  `Pour installer ce projet il faut : ␊
  - cloner le projet avec la commande suivante : ␊
  	# git clone https://gitlab.com/manon.lebihan/chatbot.git␊
   - puis installer avec :␊
  	# npm install␊
  - et enfin le lancer avec :␊
  	# npm start␊
  ␊
      Ce programme a plusieurs points d'netrée qui font plusieurs choses différentes.␊
  ␊
      La route get "/" retourne soit : ␊
      -"La dernière personne que j'ai rencontrée est:" suivi du nom du dernier nom entré.␊
      -"Je n'ai rencontré personne pour l'instant" si aucun nom n'a été rentré.␊
      -"J'ai perdu la mémoire..." s'il y a un problème pour récupérer les données.␊
  ␊
      La route post "/" qui retourne "Bienvenue" et le nom entré par l'utilisateur soit "Il manque votre nom" s'il n'y a pas de nom rentré.`

  Regular expression:

  /npm test|curl/



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172:       const { data } = await axios[method.toLowerCase()](url, body);
   173:       t.regex(data, exp);                                           
   174:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172:       const { data } = await axios[method.toLowerCase()](url, body);
   173:       t.regex(data, exp);                                           
   174:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Il manque votre nom/



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172:       const { data } = await axios[method.toLowerCase()](url, body);
   173:       t.regex(data, exp);                                           
   174:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172:       const { data } = await axios[method.toLowerCase()](url, body);
   173:       t.regex(data, exp);                                           
   174:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172:       const { data } = await axios[method.toLowerCase()](url, body);
   173:       t.regex(data, exp);                                           
   174:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172:       const { data } = await axios[method.toLowerCase()](url, body);
   173:       t.regex(data, exp);                                           
   174:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:173

   172:       const { data } = await axios[method.toLowerCase()](url, body);
   173:       t.regex(data, exp);                                           
   174:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:195

   194:     );                                                       
   195:     t.is(docs.length, 1);                                    
   196:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:207

   206:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   207:     t.regex(data, /J'ai perdu la mémoire/);                            
   208:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: socket hang up'

  Regular expression:

  /J'ai perdu la mémoire/


🧹 Stop and remove Docker containers...
