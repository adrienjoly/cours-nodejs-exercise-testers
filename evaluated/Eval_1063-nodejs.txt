
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const express = require('express');
      const app = express();
      const MongoClient = require('mongodb').MongoClient;
      require("dotenv").config();
      const URL = process.env.MONGODB_URL;
      const COLLECTION = process.env.MONGODB_COLLECTION;
      const DBNAME = process.env.MONGODB_DATABASE;

      const PORT = process.env.PORT || 3000;

      app.use(express.json());
      app.listen(PORT, () => console.log(`Server is listening on port ${PORT}...`))

      let ERROR_SERV = false; 

      ( async() => {

          const client = new MongoClient(URL);
          try {
              await client.connect();
          } catch (err) {
              ERROR_SERV = true;
          }

          app.post('/', async function (req, res) {
              const db = client.db(DBNAME);

              if (req.body.nom != undefined) {
                  await db.collection(COLLECTION).insertOne({ nom: req.body.nom });
                  res.send('Bienvenue, '+req.body.nom+'.') 
              } else {
                  res.send('Il manque votre nom.')
              }
          })
    
          app.get('/', async function (req, res) {
              if (ERROR_SERV) {
                  res.send('J\'ai perdu la mémoire...')
              }

              const db = client.db(DBNAME);
              const col = db.collection(COLLECTION);
              let last = await col.find().sort({ _id: -1 }).limit(1).toArray();

              if (last[0].nom) {
                  res.send('La dernière personne que j\'ai rencontrée est: '+last[0].nom+'.')
              } else {
                  res.send('Je n\'ai rencontré personne pour l\'instant')
              }
          })
      })();
  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur 
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✔ (2) POST / {} -> /Il manque votre nom/
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 
  ─

  package.json permet de démarrer le serveur à l'aide de npm start

  test-partiel.js:109

   108:     const { scripts } = JSON.parse(await runInDocker('cat package.json'…
   109:     t.regex(scripts.start, /node server.js/);                           
   110:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined

  › test.serial (test-partiel.js:109:7)



  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  test-partiel.js:119

   118:     t.regex(readme, /node server|npm start/);
   119:     t.regex(readme, /npm test|curl/);        
   120:   }                                          

  Value must match expression:

  `### Partiel Node.JS ␊
  ␊
  Projet qui a pour but de répondre bonjour à une personne avec une mise en mémoire des noms.␊
  ␊
  Dépendances : ␊
  -  "body-parser": "^1.19.0",␊
  -  "dotenv": "^8.2.0",␊
  -  "express": "^4.17.1",␊
  -  "mongodb": "^3.5.9"␊
  ␊
  Pour l'installer :␊
  ␊
  - ```npm install```␊
  ␊
  Pour le lancer : ␊
  - ```npm start```␊
  ␊
  ## Setup␊
  ␊
  Pour pouvoir setup le projet il y a 3 variables d'environnement :␊
  ␊
  ```MONGODB_URL``` : Url de la base de donnée mongo db␊
  ```MONGODB_COLLECTION```: Nom de la collection qu'on veut exploité␊
  ```MONGODB_DATABASE```: Nom de la base de donnée mongo db␊
  ␊
  ## POST /␊
  - Prend un champ ```nom``` au format URL-Encoded␊
  ␊
  Répond :␊
  - Soit ```Bienvenu, XXX```(XXX étant la valeur passée dans le champ ```nom```)␊
  - Soit ```Ìl manque votre nom.```, si aucun ```nom```n'a été reçu␊
  ␊
  ## GET /␊
  - Prend un champ ```nom``` au format URL-Encoded␊
  ␊
  Répond :␊
  - Soit ```La dernière personne que j'ai rencontrée est: XXX.```(XXX étant le dernier ```nom``` transmis à ```POST /```)␊
  - Soit ```Je n'ai rencontré personne pour l'instant```, si aucun ```nom```n'a été transmis à ```POST /``` pour l'instant;␊
  - Soit ```J'ai perdu la mémoire...```, si un problème technique empêche la récupération du nom.`

  Regular expression:

  /npm test|curl/

  › test.serial (test-partiel.js:119:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, adrien/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, michelle/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  test-partiel.js:188

   187:     );                                                       
   188:     t.is(docs.length, 1);                                    
   189:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1

  › test.serial (test-partiel.js:188:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  test-partiel.js:200

   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   200:     t.regex(data, /J'ai perdu la mémoire/);                            
   201:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /J'ai perdu la mémoire/

  › test.serial (test-partiel.js:200:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)

  ─

  10 tests failed

🧹 Stop and remove Docker containers...
