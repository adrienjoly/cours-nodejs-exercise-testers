
Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ const express = require('express');
      const app = express();
      const MongoClient = require('mongodb').MongoClient;
      require("dotenv").config();
      const URL = process.env.MONGODB_URL;
      const COLLECTION = process.env.MONGODB_COLLECTION;
      const DBNAME = process.env.MONGODB_DATABASE;

      const PORT = process.env.PORT || 3000;

      app.use(express.json());
      app.listen(PORT, () => console.log(`Server is listening on port ${PORT}...`))

      let ERROR_SERV = false; 

      ( async() => {

          const client = new MongoClient(URL);
          try {
              await client.connect();
          } catch (err) {
              ERROR_SERV = true;
          }

          app.post('/', async function (req, res) {
              const db = client.db(DBNAME);

              if (req.body.nom != undefined) {
                  await db.collection(COLLECTION).insertOne({ nom: req.body.nom });
                  res.send('Bienvenue, '+req.body.nom+'.') 
              } else {
                  res.send('Il manque votre nom.')
              }
          })
    
          app.get('/', async function (req, res) {
              if (ERROR_SERV) {
                  res.send('J\'ai perdu la m√©moire...')
              }

              const db = client.db(DBNAME);
              const col = db.collection(COLLECTION);
              let last = await col.find().sort({ _id: -1 }).limit(1).toArray();

              if (last[0].nom) {
                  res.send('La derni√®re personne que j\'ai rencontr√©e est: '+last[0].nom+'.')
              } else {
                  res.send('Je n\'ai rencontr√© personne pour l\'instant')
              }
          })
      })();
  ‚úî server.js utilise seulement await pour r√©cup√©rer les valeurs promises
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úî package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install
  ‚úñ package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start `t.regex()` must be called with a string
  ‚úñ README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur 
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
    at /usr/src/app/server.js:45:21
    at process._tickCallback (internal/process/next_tick.js:68:7)

(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.

(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
    at /usr/src/app/server.js:45:21
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)

(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
    at /usr/src/app/server.js:45:21
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 3)

  ‚úñ le serveur r√©pond sur le port 3000 Rejected promise returned by test
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
    at /usr/src/app/server.js:45:21
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 4)

  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ Rejected promise returned by test
  ‚úî (2) POST / {} -> /Il manque votre nom/
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
    at /usr/src/app/server.js:45:21
    at process._tickCallback (internal/process/next_tick.js:68:7)

(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 5)

  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ Rejected promise returned by test
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
    at /usr/src/app/server.js:45:21
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 6)

  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ Rejected promise returned by test
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
(node) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'nom' of undefined
    at /usr/src/app/server.js:45:21
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 7)

  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ Rejected promise returned by test
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus Rejected promise returned by test

  11 tests failed

  package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:92

   91:     const { scripts } = JSON.parse(await runInDocker('cat package.json')‚Ä¶
   92:     t.regex(scripts.start, /node server.js/);                            
   93:   }                                                                      

  `t.regex()` must be called with a string

  Called with:

  undefined



  README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:102

   101:     t.regex(readme, /node server|npm start/);
   102:     t.regex(readme, /npm test|curl/);        
   103:   }                                          

  Value must match expression:

  `### Partiel Node.JS ‚êä
  ‚êä
  Projet qui a pour but de r√©pondre bonjour √† une personne avec une mise en m√©moire des noms.‚êä
  ‚êä
  D√©pendances : ‚êä
  -  "body-parser": "^1.19.0",‚êä
  -  "dotenv": "^8.2.0",‚êä
  -  "express": "^4.17.1",‚êä
  -  "mongodb": "^3.5.9"‚êä
  ‚êä
  Pour l'installer :‚êä
  ‚êä
  - ```npm install```‚êä
  ‚êä
  Pour le lancer : ‚êä
  - ```npm start```‚êä
  ‚êä
  ## Setup‚êä
  ‚êä
  Pour pouvoir setup le projet il y a 3 variables d'environnement :‚êä
  ‚êä
  ```MONGODB_URL``` : Url de la base de donn√©e mongo db‚êä
  ```MONGODB_COLLECTION```: Nom de la collection qu'on veut exploit√©‚êä
  ```MONGODB_DATABASE```: Nom de la base de donn√©e mongo db‚êä
  ‚êä
  ## POST /‚êä
  - Prend un champ ```nom``` au format URL-Encoded‚êä
  ‚êä
  R√©pond :‚êä
  - Soit ```Bienvenu, XXX```(XXX √©tant la valeur pass√©e dans le champ ```nom```)‚êä
  - Soit ```√ål manque votre nom.```, si aucun ```nom```n'a √©t√© re√ßu‚êä
  ‚êä
  ## GET /‚êä
  - Prend un champ ```nom``` au format URL-Encoded‚êä
  ‚êä
  R√©pond :‚êä
  - Soit ```La derni√®re personne que j'ai rencontr√©e est: XXX.```(XXX √©tant le dernier ```nom``` transmis √† ```POST /```)‚êä
  - Soit ```Je n'ai rencontr√© personne pour l'instant```, si aucun ```nom```n'a √©t√© transmis √† ```POST /``` pour l'instant;‚êä
  - Soit ```J'ai perdu la m√©moire...```, si un probl√®me technique emp√™che la r√©cup√©ration du nom.`

  Regular expression:

  /npm test|curl/



  le serveur r√©pond sur le port 3000


  Rejected promise returned by test. Reason:

  Error {
    cmd: 'PORT=3000 ./wait-for-student-server.sh',
    code: 1,
    killed: false,
    signal: null,
    stderr: '',
    stdout: `‚êä
    Wait for server on port 3000...‚êä
    (1)‚êä
    (2)‚êä
    (3)‚êä
    ‚ùå  Server is NOT listening on port 3000.‚êä
    `,
    message: `Command failed: PORT=3000 ./wait-for-student-server.sh‚êä
    `,
  }



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNABORTED',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: 1595005719414,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: HTTPParser { ‚Ä¶ },
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'timeout of exceeded',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  Timeout.handleRequestTimeout (node_modules/axios/lib/adapters/http.js:252:16)



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNABORTED',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: 1595005720947,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: HTTPParser { ‚Ä¶ },
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'timeout of exceeded',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  Timeout.handleRequestTimeout (node_modules/axios/lib/adapters/http.js:252:16)



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNABORTED',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: 1595005722493,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: HTTPParser { ‚Ä¶ },
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'timeout of exceeded',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  Timeout.handleRequestTimeout (node_modules/axios/lib/adapters/http.js:252:16)



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNABORTED',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: 1595005724015,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: HTTPParser { ‚Ä¶ },
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'timeout of exceeded',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  Timeout.handleRequestTimeout (node_modules/axios/lib/adapters/http.js:252:16)



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:176

   175:     );                                                       
   176:     t.is(docs.length, 1);                                    
   177:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNABORTED',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: 1595005729193,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: HTTPParser { ‚Ä¶ },
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'timeout of exceeded',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  Timeout.handleRequestTimeout (node_modules/axios/lib/adapters/http.js:252:16)


üßπ Stop and remove Docker containers...
