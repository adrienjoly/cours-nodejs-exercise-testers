
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const MongoClient = require("mongodb").MongoClient;
      const express = require("express");
      const app = express();
      const bodyParser = require("body-parser");
      const { response } = require("express");
      require("dotenv").config();
      const PORT = process.env.PORT || 3000;
      const dbName = process.env.MONGODB_DATABASE;
      const client = new MongoClient(process.env.MONGODB_URL);

      (async () => {
        await client.connect();
        const db = client.db(dbName);
        const collection = db.collection(process.env.MONGODB_COLLECTION);

        app.use(
          bodyParser.urlencoded({
            extended: true,
          })
        );

        app.post("/", function (req, res) {
          if (req.body.nom === "") res.send("Il manque votre nom.");
          else {
            const user = { nom: req.body.nom };
            try {
              collection.insertOne(user, function (err) {
                if (err) throw err;
              });
            } catch (e) {
              console.error(e);
            }
            res.send(`Bienvenue, ${req.body.nom}.`);
          }
        });

        app.get("/", async function (req, res) {
          try {
            const messages = await collection.findOne({}, { field: "asc", _id: -1 });
            console.log(messages.nom);
            if (messages)
              res.send(
                `La dernière personne que j'ai rencontrée est: ${messages.nom}`
              );
            else res.send("Je n'ai rencontré personne pour l'instant");
          } catch (e) {
            console.error(e);
            res.send("J'ai perdu la mémoire...");
          }
        });

        app.listen(PORT, function () {
          console.log(`App Listen on ${PORT}`);
        });
      })();

  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✖ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur 
TypeError: Cannot read property 'nom' of null
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (2) POST / {} -> /Il manque votre nom/ 
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✔ (4) POST / "nom=adrien" -> /Bienvenue, adrien/
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✔ (6) POST / "nom=michelle" -> /Bienvenue, michelle/
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 

  9 tests failed

  package.json permet de démarrer le serveur à l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:110

   109:     const { scripts } = JSON.parse(await runInDocker('cat package.json'…
   110:     t.regex(scripts.start, /node server.js/);                           
   111:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined



  README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:119

   118:     t.regex(readme, /npm i/);                
   119:     t.regex(readme, /node server|npm start/);
   120:     t.regex(readme, /npm test|curl/);        

  Value must match expression:

  `# Save Name Server␊
  ␊
  ===============␊
  ␊
  ## Setup␊
  ␊
  ```␊
  $ git clone https://gitlab.eemi.tech/corentin.ravet/node-app.git␊
  $ cd 1577-nodejs␊
  $ npm install␊
  $ npm run start␊
  ```␊
  ␊
  # What it is, what it does␊
  ␊
  Server that displays name on a single page.␊
  On : `http://localhost:3000/`␊
  ␊
  # Usage␊
  ␊
  ============␊
  ␊
  ```␊
  $ curl -X POST --header "Content-Type: application/x-www-form-urlencoded" --data "nom=John" http://localhost:3000/␊
  $ curl -X POST --header "Content-Type: application/x-www-form-urlencoded" --data "nom=" http://localhost:3000/␊
  ```␊
  `

  Regular expression:

  /node server|npm start/



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  'J\'ai perdu la mémoire...'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  'Bienvenue, undefined.'

  Regular expression:

  /Il manque votre nom/



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  'La dernière personne que j\'ai rencontrée est: null'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  'La dernière personne que j\'ai rencontrée est: null'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:168

   167:       const { data } = await axios[method.toLowerCase()](url, body);
   168:       t.regex(data, exp);                                           
   169:     }                                                               

  Value must match expression:

  'La dernière personne que j\'ai rencontrée est: null'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:190

   189:     );                                                       
   190:     t.is(docs.length, 1);                                    
   191:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 3
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:202

   201:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   202:     t.regex(data, /J'ai perdu la mémoire/);                            
   203:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /J'ai perdu la mémoire/


🧹 Stop and remove Docker containers...
