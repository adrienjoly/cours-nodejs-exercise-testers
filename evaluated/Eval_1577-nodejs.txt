
Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ const MongoClient = require("mongodb").MongoClient;
      const express = require("express");
      const app = express();
      const bodyParser = require("body-parser");
      const { response } = require("express");
      require("dotenv").config();
      const PORT = process.env.PORT || 3000;
      const dbName = process.env.MONGODB_DATABASE;
      const client = new MongoClient(process.env.MONGODB_URL);

      (async () => {
        await client.connect();
        const db = client.db(dbName);
        const collection = db.collection(process.env.MONGODB_COLLECTION);

        app.use(
          bodyParser.urlencoded({
            extended: true,
          })
        );

        app.post("/", function (req, res) {
          if (req.body.nom === "") res.send("Il manque votre nom.");
          else {
            const user = { nom: req.body.nom };
            try {
              collection.insertOne(user, function (err) {
                if (err) throw err;
              });
            } catch (e) {
              console.error(e);
            }
            res.send(`Bienvenue, ${req.body.nom}.`);
          }
        });

        app.get("/", async function (req, res) {
          try {
            const messages = await collection.findOne({}, { field: "asc", _id: -1 });
            console.log(messages.nom);
            if (messages)
              res.send(
                `La derni√®re personne que j'ai rencontr√©e est: ${messages.nom}`
              );
            else res.send("Je n'ai rencontr√© personne pour l'instant");
          } catch (e) {
            console.error(e);
            res.send("J'ai perdu la m√©moire...");
          }
        });

        app.listen(PORT, function () {
          console.log(`App Listen on ${PORT}`);
        });
      })();

  ‚úî server.js utilise seulement await pour r√©cup√©rer les valeurs promises
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme (273ms)
  ‚úî package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install (193ms)
  ‚úñ package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start `t.regex()` must be called with a string
  ‚úñ README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur 
  ‚úî le serveur r√©pond sur le port 3000 (14.3s)
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (2) POST / {} -> /Il manque votre nom/ 
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úî (4) POST / "nom=adrien" -> /Bienvenue, adrien/
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ 
  ‚úî (6) POST / "nom=michelle" -> /Bienvenue, michelle/
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ 
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus Rejected promise returned by test

  9 tests failed

  package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:92

   91:     const { scripts } = JSON.parse(await runInDocker('cat package.json')‚Ä¶
   92:     t.regex(scripts.start, /node server.js/);                            
   93:   }                                                                      

  `t.regex()` must be called with a string

  Called with:

  undefined



  README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:101

   100:     t.regex(readme, /npm i/);                
   101:     t.regex(readme, /node server|npm start/);
   102:     t.regex(readme, /npm test|curl/);        

  Value must match expression:

  `# Save Name Server‚êä
  ‚êä
  ===============‚êä
  ‚êä
  ## Setup‚êä
  ‚êä
  ```‚êä
  $ git clone https://gitlab.eemi.tech/corentin.ravet/node-app.git‚êä
  $ cd 1577-nodejs‚êä
  $ npm install‚êä
  $ npm run start‚êä
  ```‚êä
  ‚êä
  # What it is, what it does‚êä
  ‚êä
  Server that displays name on a single page.‚êä
  On : `http://localhost:3000/`‚êä
  ‚êä
  # Usage‚êä
  ‚êä
  ============‚êä
  ‚êä
  ```‚êä
  $ curl -X POST --header "Content-Type: application/x-www-form-urlencoded" --data "nom=John" http://localhost:3000/‚êä
  $ curl -X POST --header "Content-Type: application/x-www-form-urlencoded" --data "nom=" http://localhost:3000/‚êä
  ```‚êä
  `

  Regular expression:

  /node server|npm start/



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'J\'ai perdu la m√©moire...'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (2) POST / {} -> /Il manque votre nom/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Bienvenue, undefined.'

  Regular expression:

  /Il manque votre nom/



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'La derni√®re personne que j\'ai rencontr√©e est: null'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'La derni√®re personne que j\'ai rencontr√©e est: null'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'La derni√®re personne que j\'ai rencontr√©e est: null'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:176

   175:     );                                                       
   176:     t.is(docs.length, 1);                                    
   177:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 3
  + 1



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/node_modules/axios/lib/core/createError.js:16

  Rejected promise returned by test. Reason:

  Error {
    code: 'ECONNABORTED',
    config: {
      adapter: Function httpAdapter {},
      data: undefined,
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.19.0',
      },
      maxContentLength: -1,
      method: 'get',
      timeout: 1500,
      transformRequest: [
        Function transformRequest {},
      ],
      transformResponse: [
        Function transformResponse {},
      ],
      url: 'http://localhost:3000/',
      validateStatus: Function validateStatus {},
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
    },
    isAxiosError: true,
    request: Writable {
      _currentRequest: ClientRequest {
        _contentLength: 0,
        _ended: false,
        _events: Object { ‚Ä¶ },
        _eventsCount: 6,
        _hasBody: true,
        _header: `GET / HTTP/1.1‚êç‚êä
        Accept: application/json, text/plain, */*‚êç‚êä
        User-Agent: axios/0.19.0‚êç‚êä
        Host: localhost:3000‚êç‚êä
        Connection: close‚êç‚êä
        ‚êç‚êä
        `,
        _headerSent: true,
        _last: true,
        _maxListeners: undefined,
        _onPendingData: Function noopPendingOutput {},
        _redirectable: [Circular],
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _trailer: '',
        aborted: 1595001049104,
        agent: Agent { ‚Ä¶ },
        chunkedEncoding: false,
        connection: Socket { ‚Ä¶ },
        finished: true,
        maxHeadersCount: null,
        method: 'GET',
        output: [],
        outputCallbacks: [],
        outputEncodings: [],
        outputSize: 0,
        parser: HTTPParser { ‚Ä¶ },
        path: '/',
        res: null,
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket { ‚Ä¶ },
        socketPath: undefined,
        timeout: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        useChunkedEncodingByDefault: false,
        writable: true,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: Object { ‚Ä¶ },
      },
      _currentUrl: 'http://localhost:3000/',
      _events: {
        error: Function handleRequestError {},
        response: Function handleResponse {},
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _onNativeResponse: Function {},
      _options: {
        agent: undefined,
        auth: undefined,
        headers: Object { ‚Ä¶ },
        hostname: 'localhost',
        maxBodyLength: 10485760,
        maxRedirects: 21,
        method: 'GET',
        nativeProtocols: Object { ‚Ä¶ },
        path: '/',
        pathname: '/',
        port: '3000',
        protocol: 'http:',
      },
      _redirectCount: 0,
      _redirects: [],
      _requestBodyBuffers: [],
      _requestBodyLength: 0,
      _writableState: WritableState [
        autoDestroy: false,
        bufferProcessing: false,
        bufferedRequest: null,
        bufferedRequestCount: 0,
        corked: 0,
        corkedRequestsFree: Object { ‚Ä¶ },
        decodeStrings: true,
        defaultEncoding: 'utf8',
        destroyed: false,
        emitClose: true,
        ended: false,
        ending: false,
        errorEmitted: false,
        finalCalled: false,
        finished: false,
        highWaterMark: 16384,
        lastBufferedRequest: null,
        length: 0,
        needDrain: false,
        objectMode: false,
        onwrite: Function bound onwrite {},
        pendingcb: 0,
        prefinished: false,
        sync: true,
        writecb: null,
        writelen: 0,
        writing: false,
      ],
      writable: true,
    },
    response: undefined,
    toJSON: Function {},
    message: 'timeout of 1500ms exceeded',
  }

  createError (node_modules/axios/lib/core/createError.js:16:15)
  Timeout.handleRequestTimeout (node_modules/axios/lib/adapters/http.js:252:16)


üßπ Stop and remove Docker containers...
