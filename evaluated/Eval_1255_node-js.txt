
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const PORT = process.env.PORT || 3000;
      //require("dotenv").config();

      const express = require("express");
      const app = express();
      /*
      const MongoClient = require('mongodb').MongoClient;
      const URL = process.env.MONGODB_URL;
      const COLLECTION = process.env.MONGODB_COLLECTION;
      const DATABASE = process.env.MONGODB_DATABASE;
      */
      app.use(express.json());

      app.get("/", function (req, res) {
          res.send("Hello World");
      });

      app.post("/", async function (req, res) {

          var nom = req.query.nom

          if (nom != undefined) {
              res.send('Bienvenue, ' + nom + '.')
          } else {
              res.send('Il manque votre nom.')
          }
      });

      app.listen(PORT, function () {
          console.log("The server is listening on port", PORT);
      });
  ✖ server.js utilise seulement await pour récupérer les valeurs promises 
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✔ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur
  ✔ le serveur répond sur le port 3000
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✔ (2) POST / {} -> /Il manque votre nom/
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 

  10 tests failed

  server.js utilise seulement await pour récupérer les valeurs promises

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:64

   63:     const { serverSource } = t.context;  
   64:     t.regex(serverSource, /await/);      
   65:     t.notRegex(serverSource, /\.then\(/);

  Value must match expression:

  `const PORT = process.env.PORT || 3000;␍␊
  //require("dotenv").config();␍␊
  ␍␊
  const express = require("express");␍␊
  const app = express();␍␊
  /*␍␊
  const MongoClient = require('mongodb').MongoClient;␍␊
  const URL = process.env.MONGODB_URL;␍␊
  const COLLECTION = process.env.MONGODB_COLLECTION;␍␊
  const DATABASE = process.env.MONGODB_DATABASE;␍␊
  */␍␊
  app.use(express.json());␍␊
  ␍␊
  app.get("/", function (req, res) {␍␊
      res.send("Hello World");␍␊
  });␍␊
  ␍␊
  app.post("/", async function (req, res) {␍␊
  ␍␊
      var nom = req.query.nom␍␊
  ␍␊
      if (nom != undefined) {␍␊
          res.send('Bienvenue, ' + nom + '.')␍␊
      } else {␍␊
          res.send('Il manque votre nom.')␍␊
      }␍␊
  });␍␊
  ␍␊
  app.listen(PORT, function () {␍␊
      console.log("The server is listening on port", PORT);␍␊
  });`

  Regular expression:

  /await/



  package.json permet de démarrer le serveur à l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:92

   91:     const { scripts } = JSON.parse(await runInDocker('cat package.json')…
   92:     t.regex(scripts.start, /node server.js/);                            
   93:   }                                                                      

  `t.regex()` must be called with a string

  Called with:

  undefined



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Hello World'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Hello World'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Hello World'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:155

   154:       const { data } = await axios[method.toLowerCase()](url, body);
   155:       t.regex(data, exp);                                           
   156:     }                                                               

  Value must match expression:

  'Hello World'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:176

   175:     );                                                       
   176:     t.is(docs.length, 1);                                    
   177:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:187

   186:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   187:     t.regex(data, /J'ai perdu la mémoire/);                            
   188:   }                                                                     

  Value must match expression:

  'Hello World'

  Regular expression:

  /J'ai perdu la mémoire/


🧹 Stop and remove Docker containers...
