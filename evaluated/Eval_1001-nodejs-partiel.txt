Remarques:
- le code est lisible et montre une bonne maitrise.
- dommage que les consignes sur les noms de db, collection et encodage n'aient pas été respectées
- dommage que le code final n'ait pas été testé avant le rendu. (notamment res.send() appelé en dehors d'un handler express)

Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const express = require('express');
      const bodyParser = require('body-parser');

      require('dotenv').config();

      const MongoClient = require('mongodb').MongoClient;

      const mongoUri = process.env.MONGODB_URL;

      const app = express();

      // app.use(
      //   bodyParser.urlencoded({
      //     extended: true,
      //   })
      // );

      app.use(bodyParser.json());

      const port = process.env.PORT || 3000;

      async function insertName(nom) {
        const client = new MongoClient(mongoUri);

        try {
          await client.connect();

          const db = client.db(process.env.MONGODB_DATABASE);
          const collection = db.collection(process.env.MONGODB_COLLECTION);

          await collection.insertOne({
            name: nom,
          });

          console.log('Inserted name with success');
        } catch (error) {
          console.log(error);
        }

        client.close();
      }

      async function getLastName() {
        const client = new MongoClient(mongoUri);

        try {
          await client.connect();

          const db = client.db('partiel');
          const collection = db.collection('name');

          const response = await collection
            .find()
            .sort({ _id: -1 })
            .limit(1)
            .toArray();

          return response[0]['name'];
        } catch (error) {
          console.log(error);
          res.send("J'ai perdu la mémoire...");
        }

        client.close();
      }

      app.get('/', async (req, res) => {
        let lastNameInserted = await getLastName();
        if (lastNameInserted === undefined) {
          res.send("Je n'ai rencontré personne pour l'instant");
        } else {
          res.send(
            `La dernière personne que j'ai rencontrée est: ${lastNameInserted}`
          );
        }
      });

      app.post('/', (req, res) => {
        console.log('got here');

        const nom = req.body.nom;
        if (nom != undefined) {
          insertName(nom);
          res.send(`Bienvenue, ${nom}.`);
        } else {
          res.send('Il manque votre nom.');
        }
      });

      app.listen(port, () => {
        console.log(`Listening on PORT ${port}`);
      });

  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✔ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur
[MONGODB SERVER] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'name' of undefined
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✔ (2) POST / {} -> /Il manque votre nom/
[MONGODB SERVER] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'name' of undefined
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
[MONGODB SERVER] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'name' of undefined
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
[MONGODB SERVER] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'name' of undefined
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
{ MongoNetworkError: connection 0 to localhost:27027 closed
{ MongoNetworkError: failed to connect to server [localhost:27027] on first connect [MongoNetworkError: connect ECONNREFUSED 127.0.0.1:27027]
(node) UnhandledPromiseRejectionWarning: ReferenceError: res is not defined
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 
  ─

  package.json permet de démarrer le serveur à l'aide de npm start

  test-partiel.js:109

   108:     const { scripts } = JSON.parse(await runInDocker('cat package.json'…
   109:     t.regex(scripts.start, /node server.js/);                           
   110:   }                                                                     

  `t.regex()` must be called with a string

  Called with:

  undefined

  › test.serial (test-partiel.js:109:7)



  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, adrien/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, michelle/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/

  › test.serial (test-partiel.js:167:9)
  › process._tickCallback (internal/process/next_tick.js:68:7)



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  test-partiel.js:188

   187:     );                                                       
   188:     t.is(docs.length, 1);                                    
   189:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1

  › test.serial (test-partiel.js:188:7)



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  test-partiel.js:200

   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   200:     t.regex(data, /J'ai perdu la mémoire/);                            
   201:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /J'ai perdu la mémoire/

  › test.serial (test-partiel.js:200:7)
  › process._tickCallback (internal/process/next_tick.js:68:7)

  ─

  9 tests failed

🧹 Stop and remove Docker containers...
