
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const express = require('express');
      const bodyParser = require('body-parser');

      require('dotenv').config();

      const MongoClient = require('mongodb').MongoClient;

      const mongoUri = process.env.MONGODB_URL;

      const app = express();

      // app.use(
      //   bodyParser.urlencoded({
      //     extended: true,
      //   })
      // );

      app.use(bodyParser.json());

      const port = process.env.PORT || 3000;

      async function insertName(nom) {
        const client = new MongoClient(mongoUri);

        try {
          await client.connect();

          const db = client.db(process.env.MONGODB_DATABASE);
          const collection = db.collection(process.env.MONGODB_COLLECTION);

          await collection.insertOne({
            name: nom,
          });

          console.log('Inserted name with success');
        } catch (error) {
          console.log(error);
        }

        client.close();
      }

      async function getLastName() {
        const client = new MongoClient(mongoUri);

        try {
          await client.connect();

          const db = client.db('partiel');
          const collection = db.collection('name');

          const response = await collection
            .find()
            .sort({ _id: -1 })
            .limit(1)
            .toArray();

          return response[0]['name'];
        } catch (error) {
          console.log(error);
          res.send("J'ai perdu la mémoire...");
        }

        client.close();
      }

      app.get('/', async (req, res) => {
        let lastNameInserted = await getLastName();
        if (lastNameInserted === undefined) {
          res.send("Je n'ai rencontré personne pour l'instant");
        } else {
          res.send(
            `La dernière personne que j'ai rencontrée est: ${lastNameInserted}`
          );
        }
      });

      app.post('/', (req, res) => {
        console.log('got here');

        const nom = req.body.nom;
        if (nom != undefined) {
          insertName(nom);
          res.send(`Bienvenue, ${nom}.`);
        } else {
          res.send('Il manque votre nom.');
        }
      });

      app.listen(port, () => {
        console.log(`Listening on PORT ${port}`);
      });

  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✖ package.json permet de démarrer le serveur à l'aide de npm start `t.regex()` must be called with a string
  ✔ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur

  Uncaught exception in test-partiel.js

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/src/mongoInDocker.js:37

   36:       debug(data);                                                  
   37:       const { connectionString, pid } = JSON.parse(data.toString());
   38:       resolve({ pid, connectionString });                           

  SyntaxError: Unexpected token  in JSON at position 0

  ✖ test-partiel.js exited with a non-zero exit code: 1

  1 test failed
  1 uncaught exception

  package.json permet de démarrer le serveur à l'aide de npm start

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:92

   91:     const { scripts } = JSON.parse(await runInDocker('cat package.json')…
   92:     t.regex(scripts.start, /node server.js/);                            
   93:   }                                                                      

  `t.regex()` must be called with a string

  Called with:

  undefined


🧹 Stop and remove Docker containers...
