
Stop and remove previous Docker containers...

🐳 Generate and run Dockerfile from ./student-code/...

👾 Run test suite against container...

    Lecture du code source fourni
    ℹ const dotenv = require('dotenv');
      dotenv.config();
      var bodyParser = require('body-parser')
      const express = require('express');
      var fs = require('fs');

      const MongoClient = require('mongodb').MongoClient;
      const assert = require('assert');
      const app = express();

      const dbName = process.env.MONGODB_COLLECTION;

      const client = new MongoClient(process.env.MONGODB_URL, { useNewUrlParser: true });

      app.use(express.json());

      client.connect(err => {
          const db = client.db(dbName);
          const collection = db.collection(process.env.MONGODB_COLLECTION);

          //Lorsque l'utilisateur accède à la racine de l'application
          app.get('/', function (req, res) {
         
              (async function() {
                  try {
                      const user = await collection.find({}).toArray();

                      if (user) {
                          res.send("La dernière personne que j'ai rencontrée est: " + user[0].name);
                      } else {
                          res.send("Je n'ai rencontré personne pour l'instant");
                      }
                  } catch (err) {
                      res.send("J'ai perdu la mémoire...");
                  }
              })();
          });

          // Lorsque nous voulons ajouter une nouvel utilisateur
          app.post('/', function (req, res) {

              const curl = req.body.name;

              if (curl) {
                  (async function() {
                      try {

                          collection.remove()
                          let addUser = await collection.insertOne({name:curl});
                          assert.equal(1, addUser.insertedCount);
                          res.send("Bienvenue, " + curl);
                      } catch (err) {
                          res.send("J'ai perdu la mémoire...");
                      }
                  })();
              }
              else {
                  res.send("Il manque votre nom.");
              }
          });

      });

      app.listen(process.env.PORT, function () {
          console.log('Example app listening on port 3000!')
      });

  ✔ server.js utilise seulement await pour récupérer les valeurs promises
  ✔ server.js contient l'intégralité du code source de votre programme
  ✔ package.json permet d'installer les dépendances nécessaires à l'aide de npm install
  ✔ package.json permet de démarrer le serveur à l'aide de npm start
  ✔ README.md inclue les instructions à suivre pour installer, exécuter et tester le serveur
[MONGODB SERVER] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'visitor' of undefined
  ✖ (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✔ (2) POST / {} -> /Il manque votre nom/
[MONGODB SERVER] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'visitor' of undefined
  ✖ (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/ 
  ✖ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
[MONGODB SERVER] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'visitor' of undefined
  ✖ (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/ 
  ✖ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
[MONGODB SERVER] [ERROR] mongodb-fs.processor - [39mUncaught exception processing socket data:  TypeError: Cannot read property 'visitor' of undefined
  ✖ (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/ 
  ✖ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
  ✖ (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus 

  8 tests failed

  (1) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (3) GET / {} -> /Je n'ai rencontré personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontré personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernière personne que j'ai rencontrée est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernière personne que j'ai rencontrée est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:167

   166:       const { data } = await axios[method.toLowerCase()](url, body);
   167:       t.regex(data, exp);                                           
   168:     }                                                               

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernière personne que j'ai rencontrée est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:188

   187:     );                                                       
   188:     t.is(docs.length, 1);                                    
   189:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la mémoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:200

   199:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/…
   200:     t.regex(data, /J'ai perdu la mémoire/);                            
   201:   }                                                                     

  Value must match expression:

  '❌ HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /J'ai perdu la mémoire/


🧹 Stop and remove Docker containers...
