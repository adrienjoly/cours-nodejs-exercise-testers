
Stop and remove previous Docker containers...

üê≥ Generate and run Dockerfile from ./student-code/...

üëæ Run test suite against container...

    Lecture du code source fourni
    ‚Ñπ const express = require('express');
      const app = express();
      const PORT = process.env.PORT || 3000;
      app.use(express.json());
      app.listen(PORT, () => console.log(`Server is listening on port ${PORT}...`));




      app.post('/', function (req, res) {
          let name = req.query.nom
          if (name) {
              res.send('Bienvenue, ' + req.query.nom + '.')
          } else {
              res.send('Il manque votre nom.')
          }

      });

      const MongoClient = require('mongodb').MongoClient;
      const assert = require('assert');
      const url = process.env.MONGODB_URL || "mongodb+srv://cluster0.p62r1.mongodb.net/<partiel>";
      let collection;

      (async function () {

          try {
              const client = new MongoClient(url, {
                  useNewUrlParser: true
              });
              // Use connect method to connect to the Server
              await client.connect();
              const db = process.env.MONGODB_DATABASE || client.db("partiel");
              collection = process.env.MONGODB_COLLECTION || db.collection("nom");

          } catch (err) {
              console.log(err.stack);
          }

      })();

      app.get('/', async function (req, res) {

          // Select last name
          const lastName = await collection.find({from: nom}).sort({_id: -1}).limit(1).toArray();
          if (lastName) {
              res.send('La derni√®re personne que j\'ai rencontr√©e est: ' + lastName + '.')
          }else if (lastName === "") {
              res.send('Je n\'ai rencontr√© personne pour l\'instant')
          } else {
              res.send('J\'ai perdu la m√©moire...')
          }

          await collection.insertOne({
              from: 'nom',
              msg: req.query.msg
          });
      });


  ‚úî server.js utilise seulement await pour r√©cup√©rer les valeurs promises
  ‚úî server.js contient l'inteÃÅgraliteÃÅ du code source de votre programme
  ‚úî package.json permet d'installer les deÃÅpendances neÃÅcessaires aÃÄ l'aide de npm install
  ‚úî package.json permet de deÃÅmarrer le serveur aÃÄ l'aide de npm start
  ‚úî README.md inclue les instructions aÃÄ suivre pour installer, exeÃÅcuter et tester le serveur
(node) UnhandledPromiseRejectionWarning: ReferenceError: nom is not defined
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node) UnhandledPromiseRejectionWarning: ReferenceError: nom is not defined
(node) UnhandledPromiseRejectionWarning: ReferenceError: nom is not defined
  ‚úñ le serveur r√©pond sur le port 3000 Rejected promise returned by test
(node) UnhandledPromiseRejectionWarning: ReferenceError: nom is not defined
  ‚úñ (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úî (2) POST / {} -> /Il manque votre nom/
(node) UnhandledPromiseRejectionWarning: ReferenceError: nom is not defined
  ‚úñ (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/ 
  ‚úñ (4) POST / "nom=adrien" -> /Bienvenue, adrien/ 
(node) UnhandledPromiseRejectionWarning: ReferenceError: nom is not defined
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 6)
  ‚úñ (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/ 
  ‚úñ (6) POST / "nom=michelle" -> /Bienvenue, michelle/ 
(node) UnhandledPromiseRejectionWarning: ReferenceError: nom is not defined
(node) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 7)
  ‚úñ (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/ 
  ‚úñ MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur 
(node) UnhandledPromiseRejectionWarning: ReferenceError: nom is not defined
  ‚úñ (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus 

  9 tests failed

  le serveur r√©pond sur le port 3000


  Rejected promise returned by test. Reason:

  Error {
    cmd: 'PORT=3000 ./wait-for-student-server.sh',
    code: 1,
    killed: false,
    signal: null,
    stderr: '',
    stdout: `‚êä
    Wait for server on port 3000...‚êä
    (1)‚êä
    (2)‚êä
    (3)‚êä
    ‚ùå  Server is NOT listening on port 3000.‚êä
    `,
    message: `Command failed: PORT=3000 ./wait-for-student-server.sh‚êä
    `,
  }



  (1) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (3) GET / {} -> /Je n'ai rencontreÃÅ personne pour l'instant/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /Je n'ai rencontreÃÅ personne pour l'instant/



  (4) POST / "nom=adrien" -> /Bienvenue, adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, adrien/



  (5) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: adrien/



  (6) POST / "nom=michelle" -> /Bienvenue, michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  'Il manque votre nom.'

  Regular expression:

  /Bienvenue, michelle/



  (7) GET / {} -> /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:162

   161:       const { data } = await axios[method.toLowerCase()](url, body);
   162:       t.regex(data, exp);                                           
   163:     }                                                               

  Value must match expression:

  '‚ùå HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /La dernieÃÄre personne que j'ai rencontreÃÅe est: michelle/



  MONGODB_COLLECTION ne doit contenir qu'un document avec le nom du dernier visiteur

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:183

   182:     );                                                       
   183:     t.is(docs.length, 1);                                    
   184:     t.deepEqual(Object.keys(docs[0]).sort(), ['_id', 'nom']);

  Difference:

  - 0
  + 1



  (8) GET / -> "J'ai perdu la meÃÅmoire...", si la db ne fonctionne plus

  /Users/adrienjoly/dev/adrienjoly/cours-nodejs-exercise-testers/test-partiel.js:194

   193:     const { data } = await axios.get(`http://localhost:${envVars.PORT}/‚Ä¶
   194:     t.regex(data, /J'ai perdu la meÃÅmoire/);                            
   195:   }                                                                     

  Value must match expression:

  '‚ùå HTTP Error: Error: timeout of exceeded'

  Regular expression:

  /J'ai perdu la meÃÅmoire/


üßπ Stop and remove Docker containers...
