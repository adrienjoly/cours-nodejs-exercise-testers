const test = require('ava');
const axios = require('axios');
const { runInDocker } = require('./runInDocker');

// prevent axios from throwing exceptions for non-200 http responses
axios.interceptors.response.use(
  response => response,
  error => Promise.resolve(error.response)
);

test.before('Lecture du code source fourni', t => {
  t.context.serverFiles = runInDocker('cat files.log'); // files.log is generated by test-in-docker-from-git.sh
  t.context.packageSource = runInDocker('cat package.json');
  t.context.readmeSource = runInDocker('cat README.md');
  t.context.serverFile =
    runInDocker(`node -e "console.log(require('./package.json').main)"`) ||
    'server.js';
  t.context.serverSource = runInDocker(`cat ${t.context.serverFile}`);
  t.context.gitLog = runInDocker('git log --pretty=oneline');
  t.log(t.context.serverSource);
});

// Exigences structurelles
/*
test.serial('le dépot ne contient pas plus de 6 fichiers', t => {
  const lines = t.context.serverFiles
    .trim()
    .split(/[\r\n]+/)
    .filter(name => name != '.')
    .filter(name => name != '..')
    .filter(name => name != '.git')
    .filter(name => name != 'files.log')
    .filter(name => name != 'package-lock.json');
  t.true(lines.length <= 6);
});

test.serial('le dépot ne contient pas node_modules', t => {
  const lines = t.context.serverFiles.split('\n');
  t.false(lines.includes('node_modules'));
});

test.serial('le dépot contient un fichier package.json', t => {
  const { serverFiles } = t.context;
  t.truthy(serverFiles.match(/package\.json/i));
});

test.serial('package.json mentionne un fichier js dans "main"', t => {
  const { packageSource } = t.context;
  t.truthy(packageSource.match(/"main": ".*\.js"/));
});

test.serial('package.json mentionne express comme dépendence', t => {
  const { packageSource } = t.context;
  t.truthy(packageSource.match(/"express"/));
});
*/
// Exigences de documentation / accessibilité
/*
test.serial('le dépot contient un fichier README.md', t => {
  const { serverFiles } = t.context;
  t.truthy(serverFiles.match(/readme\.md/i));
});

test.serial('README.md fournit les commandes pour cloner, installer et lancer le serveur', t => {
  const { readmeSource } = t.context;
  t.assert(readmeSource.match(/git clone/));
  t.assert(readmeSource.match(/npm i/));
  t.assert(readmeSource.match(/npm start|node server/));
});

test.serial('README.md explique comment tester le serveur avec curl', t => {
  const { readmeSource } = t.context;
  t.regex(readmeSource, /curl/);
});

test.serial("l'historique git contient au moins un commit par exercice", t => {
  const lines = t.context.gitLog.trim().split('\n');
  t.assert(lines.length >= 2);
});

test.serial('server.js fait moins de 50 lignes', t => {
  const lines = t.context.serverSource.trim().split('\n');
  t.assert(lines.length <= 50);
});
*/
// Exigences fonctionnelles

const suite = [
  // points d'entrée des exercices précédents
  {
    req: ['GET', '/'],
    exp: /Hello World/
  },
  {
    req: ['GET', '/hello'],
    exp: /Quel est votre nom \?/
  },
  {
    req: ['GET', '/hello?nom=Sasha'],
    exp: /Bonjour, Sasha/
  },
  {
    req: ['GET', '/hello?nom=Patrick'],
    exp: /Bonjour, Patrick/
  },
  {
    req: ['GET', '/hello?nom=Michel%20Blanc'],
    exp: /Bonjour, Michel Blanc/
  },
  // points d'entrée de l'exercice 1-4 (POST)
  {
    req: ['POST', '/chat', { msg: 'ville' }],
    exp: /Nous sommes à Paris/
  },
  {
    req: ['POST', '/chat', { msg: 'météo' }],
    exp: /Il fait beau/
  },
  // points d'entrée de l'exercice 1-5 (avec mémoire)
  {
    req: ['POST', '/chat', { msg: 'demain' }],
    exp: /Je ne connais pas demain/
  },
  {
    req: ['POST', '/chat', { msg: 'demain = Mercredi' }],
    exp: /Merci pour cette information !/
  },
  {
    req: ['POST', '/chat', { msg: 'demain' }],
    exp: /demain: Mercredi/
  }
];

for (const { req, exp } of suite) {
  const [method, path, body] = req;
  test.serial(
    `${method} ${path} ${JSON.stringify(body || {})} -> ${exp.toString()}`,
    async t => {
      const url = `http://localhost:3000${path}`;
      const { data } = await axios[method.toLowerCase()](url, body);
      t.regex(data, testObj.exp);
    }
  );
}

// Usage d'express
/*
test.serial('server.js instancie express', t => {
  const { serverSource } = t.context;
  t.regex(serverSource, /express\(\)/);
});

test.serial('server.js appelle la fonction .listen()', t => {
  const { serverSource } = t.context;
  t.regex(serverSource, /\.listen\(/);
});

test.serial('server.js appelle la fonction .get(', t => {
  const { serverSource } = t.context;
  t.regex(serverSource, /\.get\(/);
});

test.serial('server.js appelle la fonction .send(', t => {
  const { serverSource } = t.context;
  t.regex(serverSource, /\.send\(/);
});

test.serial('server.js récupère process.env.PORT, pour Heroku', t => {
  const { serverSource } = t.context;
  t.regex(serverSource, /process\.env\.PORT/);
});
*/
